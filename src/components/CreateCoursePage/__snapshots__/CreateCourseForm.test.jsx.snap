// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCourseForm renders html correctly while submitting 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseForm
    change={[Function]}
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": false,
                        "modes": Array [
                          "masters",
                        ],
                        "name": "Masters Only",
                        "uuid": "f394732f-ba43-4260-8ada-06a9f18e7160",
                      },
                    ],
                    "entitlement_types": Array [],
                    "name": "Masters Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Masters",
                          "payee": "organization",
                          "slug": "masters",
                        },
                        "seat_type": null,
                      },
                    ],
                    "uuid": "7b41992e-f268-4331-8ba9-72acb0880454",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    currentFormValues={
      Object {
        "enrollmentTrack": "verified",
        "number": "edx101",
        "org": "edx",
        "price": 100,
        "title": "Hello",
        "type": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
      }
    }
    handleSubmit={[Function]}
    initialValues={Object {}}
    isCreating={true}
    organizations={
      Array [
        Object {
          "key": "edx",
          "name": "edX",
        },
        Object {
          "key": "edx2",
          "name": "edX2",
        },
      ]
    }
    pristine={false}
    submitting={true}
    usingCourseType={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create New Course
        </h2>,
        <hr />,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />
            }
            name="org"
            options={
              Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />
            }
            name="title"
            required={true}
            type="text"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />
            }
            name="number"
            required={true}
            type="text"
          />
          <React.Fragment>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="enrollment-track-label"
                  optional={false}
                  required={true}
                  text="Enrollment track"
                />
              }
              name="enrollmentTrack"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "verified",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "audit",
                  },
                  Object {
                    "label": "Professional Only",
                    "value": "professional",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              extraInput={
                Object {
                  "max": 10000,
                  "min": 1,
                  "step": 0.01,
                }
              }
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Price (USD)"
                />
              }
              name="price"
              required={true}
              type="number"
            />
          </React.Fragment>
          <h2>
            First run of your Course
          </h2>
          <hr />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/"
            >
              <button
                className="btn btn-outline-primary"
                disabled={true}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="pending"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create New Course",
        },
        "ref": null,
        "rendered": "Create New Course",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />,
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
              <Field
                component={[Function]}
                extraInput={
                  Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  }
                }
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />
                }
                name="price"
                required={true}
                type="number"
              />
            </React.Fragment>,
            <h2>
              First run of your Course
            </h2>,
            <hr />,
            false,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            false,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />,
              "name": "org",
              "options": Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />,
              "name": "title",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />,
              "name": "number",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />,
                <Field
                  component={[Function]}
                  extraInput={
                    Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    }
                  }
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />
                  }
                  name="price"
                  required={true}
                  type="number"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />,
                  "name": "enrollmentTrack",
                  "options": Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "extraInput": Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  },
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />,
                  "name": "price",
                  "required": true,
                  "type": "number",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "First run of your Course",
            },
            "ref": null,
            "rendered": "First run of your Course",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": true,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": false,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "pending",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create New Course
          </h2>,
          <hr />,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
              <Field
                component={[Function]}
                extraInput={
                  Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  }
                }
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />
                }
                name="price"
                required={true}
                type="number"
              />
            </React.Fragment>
            <h2>
              First run of your Course
            </h2>
            <hr />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create New Course",
          },
          "ref": null,
          "rendered": "Create New Course",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Organization"
                  />
                }
                name="org"
                options={
                  Array [
                    Object {
                      "label": "Select organization",
                      "value": "",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX",
                      "value": "edx",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX2",
                      "value": "edx2",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Maximum 70 characters. Recommended 50 or fewer characters.
                        </p>
                        <p>
                          An effective course title:
                        </p>
                        <ul>
                          <li>
                            Clearly indicates the course subject matter.
                          </li>
                          <li>
                            Follows search engine optimization (SEO) guidelines.
                          </li>
                          <li>
                            Targets a global audience.
                          </li>
                        </ul>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          English Grammar and Essay Writing
                        </p>
                      </div>
                    }
                    id="title-label"
                    optional={false}
                    required={true}
                    text="Title"
                  />
                }
                name="title"
                required={true}
                type="text"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText="Cannot edit after submission"
                    helpText={
                      <div>
                        <p>
                          Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                        </p>
                        <p>
                          If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Examples:
                          </b>
                        </p>
                        <ol>
                          <li>
                            CS002x
                          </li>
                          <li>
                            BIO1.1x, BIO1.2x
                          </li>
                        </ol>
                      </div>
                    }
                    id="number-label"
                    optional={false}
                    required={true}
                    text="Number"
                  />
                }
                name="number"
                required={true}
                type="text"
              />,
              <React.Fragment>
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />
                <Field
                  component={[Function]}
                  extraInput={
                    Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    }
                  }
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />
                  }
                  name="price"
                  required={true}
                  type="number"
                />
              </React.Fragment>,
              <h2>
                First run of your Course
              </h2>,
              <hr />,
              false,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              false,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />,
                "name": "org",
                "options": Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />,
                "name": "title",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />,
                "name": "number",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText={
                          <div>
                            <p>
                              The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                            </p>
                            <p>
                              <a
                                href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                Learn more.
                              </a>
                            </p>
                          </div>
                        }
                        id="enrollment-track-label"
                        optional={false}
                        required={true}
                        text="Enrollment track"
                      />
                    }
                    name="enrollmentTrack"
                    options={
                      Array [
                        Object {
                          "label": "Select enrollment track",
                          "value": "",
                        },
                        Object {
                          "label": "Verified and Audit",
                          "value": "verified",
                        },
                        Object {
                          "label": "Audit Only",
                          "value": "audit",
                        },
                        Object {
                          "label": "Professional Only",
                          "value": "professional",
                        },
                      ]
                    }
                    required={true}
                  />,
                  <Field
                    component={[Function]}
                    extraInput={
                      Object {
                        "max": 10000,
                        "min": 1,
                        "step": 0.01,
                      }
                    }
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText=""
                        id={null}
                        optional={false}
                        required={true}
                        text="Price (USD)"
                      />
                    }
                    name="price"
                    required={true}
                    type="number"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />,
                    "name": "enrollmentTrack",
                    "options": Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "extraInput": Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    },
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />,
                    "name": "price",
                    "required": true,
                    "type": "number",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "First run of your Course",
              },
              "ref": null,
              "rendered": "First run of your Course",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={false}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="pending"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": false,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "pending",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseForm renders html correctly with data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseForm
    change={[Function]}
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": false,
                        "modes": Array [
                          "masters",
                        ],
                        "name": "Masters Only",
                        "uuid": "f394732f-ba43-4260-8ada-06a9f18e7160",
                      },
                    ],
                    "entitlement_types": Array [],
                    "name": "Masters Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Masters",
                          "payee": "organization",
                          "slug": "masters",
                        },
                        "seat_type": null,
                      },
                    ],
                    "uuid": "7b41992e-f268-4331-8ba9-72acb0880454",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    currentFormValues={
      Object {
        "enrollmentTrack": "verified",
        "number": "edx101",
        "org": "edx",
        "price": 100,
        "title": "Hello",
        "type": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
      }
    }
    handleSubmit={[Function]}
    initialValues={
      Object {
        "enrollmentTrack": "verified",
        "number": "edx101",
        "org": "edx",
        "price": 100,
        "title": "Hello",
        "type": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
      }
    }
    isCreating={false}
    organizations={
      Array [
        Object {
          "key": "edx",
          "name": "edX",
        },
        Object {
          "key": "edx2",
          "name": "edX2",
        },
      ]
    }
    pristine={true}
    usingCourseType={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create New Course
        </h2>,
        <hr />,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />
            }
            name="org"
            options={
              Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />
            }
            name="title"
            required={true}
            type="text"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />
            }
            name="number"
            required={true}
            type="text"
          />
          <React.Fragment>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="enrollment-track-label"
                  optional={false}
                  required={true}
                  text="Enrollment track"
                />
              }
              name="enrollmentTrack"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "verified",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "audit",
                  },
                  Object {
                    "label": "Professional Only",
                    "value": "professional",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              extraInput={
                Object {
                  "max": 10000,
                  "min": 1,
                  "step": 0.01,
                }
              }
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Price (USD)"
                />
              }
              name="price"
              required={true}
              type="number"
            />
          </React.Fragment>
          <h2>
            First run of your Course
          </h2>
          <hr />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create New Course",
        },
        "ref": null,
        "rendered": "Create New Course",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />,
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
              <Field
                component={[Function]}
                extraInput={
                  Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  }
                }
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />
                }
                name="price"
                required={true}
                type="number"
              />
            </React.Fragment>,
            <h2>
              First run of your Course
            </h2>,
            <hr />,
            false,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            false,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />,
              "name": "org",
              "options": Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />,
              "name": "title",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />,
              "name": "number",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />,
                <Field
                  component={[Function]}
                  extraInput={
                    Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    }
                  }
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />
                  }
                  name="price"
                  required={true}
                  type="number"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />,
                  "name": "enrollmentTrack",
                  "options": Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "extraInput": Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  },
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />,
                  "name": "price",
                  "required": true,
                  "type": "number",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "First run of your Course",
            },
            "ref": null,
            "rendered": "First run of your Course",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create New Course
          </h2>,
          <hr />,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
              <Field
                component={[Function]}
                extraInput={
                  Object {
                    "max": 10000,
                    "min": 1,
                    "step": 0.01,
                  }
                }
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Price (USD)"
                  />
                }
                name="price"
                required={true}
                type="number"
              />
            </React.Fragment>
            <h2>
              First run of your Course
            </h2>
            <hr />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create New Course",
          },
          "ref": null,
          "rendered": "Create New Course",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Organization"
                  />
                }
                name="org"
                options={
                  Array [
                    Object {
                      "label": "Select organization",
                      "value": "",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX",
                      "value": "edx",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX2",
                      "value": "edx2",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Maximum 70 characters. Recommended 50 or fewer characters.
                        </p>
                        <p>
                          An effective course title:
                        </p>
                        <ul>
                          <li>
                            Clearly indicates the course subject matter.
                          </li>
                          <li>
                            Follows search engine optimization (SEO) guidelines.
                          </li>
                          <li>
                            Targets a global audience.
                          </li>
                        </ul>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          English Grammar and Essay Writing
                        </p>
                      </div>
                    }
                    id="title-label"
                    optional={false}
                    required={true}
                    text="Title"
                  />
                }
                name="title"
                required={true}
                type="text"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText="Cannot edit after submission"
                    helpText={
                      <div>
                        <p>
                          Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                        </p>
                        <p>
                          If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Examples:
                          </b>
                        </p>
                        <ol>
                          <li>
                            CS002x
                          </li>
                          <li>
                            BIO1.1x, BIO1.2x
                          </li>
                        </ol>
                      </div>
                    }
                    id="number-label"
                    optional={false}
                    required={true}
                    text="Number"
                  />
                }
                name="number"
                required={true}
                type="text"
              />,
              <React.Fragment>
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />
                <Field
                  component={[Function]}
                  extraInput={
                    Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    }
                  }
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />
                  }
                  name="price"
                  required={true}
                  type="number"
                />
              </React.Fragment>,
              <h2>
                First run of your Course
              </h2>,
              <hr />,
              false,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              false,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />,
                "name": "org",
                "options": Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />,
                "name": "title",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />,
                "name": "number",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText={
                          <div>
                            <p>
                              The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                            </p>
                            <p>
                              <a
                                href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                Learn more.
                              </a>
                            </p>
                          </div>
                        }
                        id="enrollment-track-label"
                        optional={false}
                        required={true}
                        text="Enrollment track"
                      />
                    }
                    name="enrollmentTrack"
                    options={
                      Array [
                        Object {
                          "label": "Select enrollment track",
                          "value": "",
                        },
                        Object {
                          "label": "Verified and Audit",
                          "value": "verified",
                        },
                        Object {
                          "label": "Audit Only",
                          "value": "audit",
                        },
                        Object {
                          "label": "Professional Only",
                          "value": "professional",
                        },
                      ]
                    }
                    required={true}
                  />,
                  <Field
                    component={[Function]}
                    extraInput={
                      Object {
                        "max": 10000,
                        "min": 1,
                        "step": 0.01,
                      }
                    }
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText=""
                        id={null}
                        optional={false}
                        required={true}
                        text="Price (USD)"
                      />
                    }
                    name="price"
                    required={true}
                    type="number"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />,
                    "name": "enrollmentTrack",
                    "options": Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "extraInput": Object {
                      "max": 10000,
                      "min": 1,
                      "step": 0.01,
                    },
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText=""
                      id={null}
                      optional={false}
                      required={true}
                      text="Price (USD)"
                    />,
                    "name": "price",
                    "required": true,
                    "type": "number",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "First run of your Course",
              },
              "ref": null,
              "rendered": "First run of your Course",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseForm renders html correctly with data and using Course Type 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseForm
    change={[Function]}
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": false,
                        "modes": Array [
                          "masters",
                        ],
                        "name": "Masters Only",
                        "uuid": "f394732f-ba43-4260-8ada-06a9f18e7160",
                      },
                    ],
                    "entitlement_types": Array [],
                    "name": "Masters Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Masters",
                          "payee": "organization",
                          "slug": "masters",
                        },
                        "seat_type": null,
                      },
                    ],
                    "uuid": "7b41992e-f268-4331-8ba9-72acb0880454",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    currentFormValues={
      Object {
        "enrollmentTrack": "verified",
        "number": "edx101",
        "org": "edx",
        "price": 100,
        "title": "Hello",
        "type": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
      }
    }
    handleSubmit={[Function]}
    initialValues={
      Object {
        "enrollmentTrack": "verified",
        "number": "edx101",
        "org": "edx",
        "price": 100,
        "title": "Hello",
        "type": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
      }
    }
    isCreating={false}
    organizations={
      Array [
        Object {
          "key": "edx",
          "name": "edX",
        },
        Object {
          "key": "edx2",
          "name": "edX2",
        },
      ]
    }
    pristine={true}
    usingCourseType={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create New Course
        </h2>,
        <hr />,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />
            }
            name="org"
            options={
              Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />
            }
            name="title"
            required={true}
            type="text"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />
            }
            name="number"
            required={true}
            type="text"
          />
          <React.Fragment>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                      </p>
                    </div>
                  }
                  id="course-type-label"
                  optional={false}
                  required={true}
                  text="Course enrollment track"
                />
              }
              name="type"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Credit",
                    "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "label": "Masters Only",
                    "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "label": "Professional Only",
                    "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ]
              }
              required={true}
            />
            <PriceList
              disabled={false}
              extraInput={Object {}}
              priceLabels={
                Object {
                  "verified": "Verified",
                }
              }
              required={true}
            />
          </React.Fragment>
          <h2>
            First run of your Course
          </h2>
          <hr />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                  </div>
                }
                id="course-run-type-label"
                optional={false}
                required={true}
                text="Course run enrollment track"
              />
            }
            name="run_type"
            options={
              Array [
                Object {
                  "label": "Select enrollment track",
                  "value": "",
                },
                Object {
                  "label": "Verified and Audit",
                  "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                },
                Object {
                  "label": "Audit Only",
                  "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create New Course",
        },
        "ref": null,
        "rendered": "Create New Course",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />,
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                        </p>
                      </div>
                    }
                    id="course-type-label"
                    optional={false}
                    required={true}
                    text="Course enrollment track"
                  />
                }
                name="type"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Credit",
                      "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                    },
                    Object {
                      "label": "Masters Only",
                      "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                    },
                  ]
                }
                required={true}
              />
              <PriceList
                disabled={false}
                extraInput={Object {}}
                priceLabels={
                  Object {
                    "verified": "Verified",
                  }
                }
                required={true}
              />
            </React.Fragment>,
            <h2>
              First run of your Course
            </h2>,
            <hr />,
            false,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="course-run-type-label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />
              }
              name="run_type"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />,
              "name": "org",
              "options": Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />,
              "name": "title",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />,
              "name": "number",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                          </p>
                          <p>
                            <b>
                              Example:
                            </b>
                          </p>
                          <p>
                            The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                          </p>
                        </div>
                      }
                      id="course-type-label"
                      optional={false}
                      required={true}
                      text="Course enrollment track"
                    />
                  }
                  name="type"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Credit",
                        "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                      },
                      Object {
                        "label": "Masters Only",
                        "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                      },
                    ]
                  }
                  required={true}
                />,
                <PriceList
                  disabled={false}
                  extraInput={Object {}}
                  priceLabels={
                    Object {
                      "verified": "Verified",
                    }
                  }
                  required={true}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                        </p>
                      </div>
                    }
                    id="course-type-label"
                    optional={false}
                    required={true}
                    text="Course enrollment track"
                  />,
                  "name": "type",
                  "options": Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Credit",
                      "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                    },
                    Object {
                      "label": "Masters Only",
                      "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                    },
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "extraInput": Object {},
                  "priceLabels": Object {
                    "verified": "Verified",
                  },
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "First run of your Course",
            },
            "ref": null,
            "rendered": "First run of your Course",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                  </div>
                }
                id="course-run-type-label"
                optional={false}
                required={true}
                text="Course run enrollment track"
              />,
              "name": "run_type",
              "options": Array [
                Object {
                  "label": "Select enrollment track",
                  "value": "",
                },
                Object {
                  "label": "Verified and Audit",
                  "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                },
                Object {
                  "label": "Audit Only",
                  "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create New Course
          </h2>,
          <hr />,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                        </p>
                      </div>
                    }
                    id="course-type-label"
                    optional={false}
                    required={true}
                    text="Course enrollment track"
                  />
                }
                name="type"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Credit",
                      "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                    },
                    Object {
                      "label": "Masters Only",
                      "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                    },
                  ]
                }
                required={true}
              />
              <PriceList
                disabled={false}
                extraInput={Object {}}
                priceLabels={
                  Object {
                    "verified": "Verified",
                  }
                }
                required={true}
              />
            </React.Fragment>
            <h2>
              First run of your Course
            </h2>
            <hr />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="course-run-type-label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />
              }
              name="run_type"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create New Course",
          },
          "ref": null,
          "rendered": "Create New Course",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Organization"
                  />
                }
                name="org"
                options={
                  Array [
                    Object {
                      "label": "Select organization",
                      "value": "",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX",
                      "value": "edx",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX2",
                      "value": "edx2",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Maximum 70 characters. Recommended 50 or fewer characters.
                        </p>
                        <p>
                          An effective course title:
                        </p>
                        <ul>
                          <li>
                            Clearly indicates the course subject matter.
                          </li>
                          <li>
                            Follows search engine optimization (SEO) guidelines.
                          </li>
                          <li>
                            Targets a global audience.
                          </li>
                        </ul>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          English Grammar and Essay Writing
                        </p>
                      </div>
                    }
                    id="title-label"
                    optional={false}
                    required={true}
                    text="Title"
                  />
                }
                name="title"
                required={true}
                type="text"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText="Cannot edit after submission"
                    helpText={
                      <div>
                        <p>
                          Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                        </p>
                        <p>
                          If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Examples:
                          </b>
                        </p>
                        <ol>
                          <li>
                            CS002x
                          </li>
                          <li>
                            BIO1.1x, BIO1.2x
                          </li>
                        </ol>
                      </div>
                    }
                    id="number-label"
                    optional={false}
                    required={true}
                    text="Number"
                  />
                }
                name="number"
                required={true}
                type="text"
              />,
              <React.Fragment>
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                          </p>
                          <p>
                            <b>
                              Example:
                            </b>
                          </p>
                          <p>
                            The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                          </p>
                        </div>
                      }
                      id="course-type-label"
                      optional={false}
                      required={true}
                      text="Course enrollment track"
                    />
                  }
                  name="type"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Credit",
                        "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                      },
                      Object {
                        "label": "Masters Only",
                        "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                      },
                    ]
                  }
                  required={true}
                />
                <PriceList
                  disabled={false}
                  extraInput={Object {}}
                  priceLabels={
                    Object {
                      "verified": "Verified",
                    }
                  }
                  required={true}
                />
              </React.Fragment>,
              <h2>
                First run of your Course
              </h2>,
              <hr />,
              false,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="course-run-type-label"
                    optional={false}
                    required={true}
                    text="Course run enrollment track"
                  />
                }
                name="run_type"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />,
                "name": "org",
                "options": Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />,
                "name": "title",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />,
                "name": "number",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText={
                          <div>
                            <p>
                              The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                            </p>
                            <p>
                              <b>
                                Example:
                              </b>
                            </p>
                            <p>
                              The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                            </p>
                          </div>
                        }
                        id="course-type-label"
                        optional={false}
                        required={true}
                        text="Course enrollment track"
                      />
                    }
                    name="type"
                    options={
                      Array [
                        Object {
                          "label": "Select enrollment track",
                          "value": "",
                        },
                        Object {
                          "label": "Credit",
                          "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                        },
                        Object {
                          "label": "Masters Only",
                          "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                        },
                        Object {
                          "label": "Verified and Audit",
                          "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                        },
                        Object {
                          "label": "Professional Only",
                          "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                        },
                        Object {
                          "label": "Audit Only",
                          "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                        },
                      ]
                    }
                    required={true}
                  />,
                  <PriceList
                    disabled={false}
                    extraInput={Object {}}
                    priceLabels={
                      Object {
                        "verified": "Verified",
                      }
                    }
                    required={true}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The Course enrollment track determines what enrollment tracks are eligible for the course runs.
                          </p>
                          <p>
                            <b>
                              Example:
                            </b>
                          </p>
                          <p>
                            The Verified and Audit selection will allow course runs to either be Verified and Audit or Audit only.
                          </p>
                        </div>
                      }
                      id="course-type-label"
                      optional={false}
                      required={true}
                      text="Course enrollment track"
                    />,
                    "name": "type",
                    "options": Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Credit",
                        "value": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                      },
                      Object {
                        "label": "Masters Only",
                        "value": "7b41992e-f268-4331-8ba9-72acb0880454",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                      },
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "extraInput": Object {},
                    "priceLabels": Object {
                      "verified": "Verified",
                    },
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "First run of your Course",
              },
              "ref": null,
              "rendered": "First run of your Course",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="course-run-type-label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />,
                "name": "run_type",
                "options": Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseForm renders html correctly with no orgs 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseForm
    change={[Function]}
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": false,
                        "modes": Array [
                          "masters",
                        ],
                        "name": "Masters Only",
                        "uuid": "f394732f-ba43-4260-8ada-06a9f18e7160",
                      },
                    ],
                    "entitlement_types": Array [],
                    "name": "Masters Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Masters",
                          "payee": "organization",
                          "slug": "masters",
                        },
                        "seat_type": null,
                      },
                    ],
                    "uuid": "7b41992e-f268-4331-8ba9-72acb0880454",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "is_marketable": true,
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    currentFormValues={Object {}}
    handleSubmit={[Function]}
    initialValues={Object {}}
    isCreating={false}
    organizations={
      Array [
        Object {
          "key": "edx",
          "name": "edX",
        },
        Object {
          "key": "edx2",
          "name": "edX2",
        },
      ]
    }
    pristine={true}
    usingCourseType={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create New Course
        </h2>,
        <hr />,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />
            }
            name="org"
            options={
              Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />
            }
            name="title"
            required={true}
            type="text"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />
            }
            name="number"
            required={true}
            type="text"
          />
          <React.Fragment>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="enrollment-track-label"
                  optional={false}
                  required={true}
                  text="Enrollment track"
                />
              }
              name="enrollmentTrack"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "verified",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "audit",
                  },
                  Object {
                    "label": "Professional Only",
                    "value": "professional",
                  },
                ]
              }
              required={true}
            />
          </React.Fragment>
          <h2>
            First run of your Course
          </h2>
          <hr />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create New Course",
        },
        "ref": null,
        "rendered": "Create New Course",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />,
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
            </React.Fragment>,
            <h2>
              First run of your Course
            </h2>,
            <hr />,
            false,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            false,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                optional={false}
                required={true}
                text="Organization"
              />,
              "name": "org",
              "options": Array [
                Object {
                  "label": "Select organization",
                  "value": "",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX",
                  "value": "edx",
                },
                Object {
                  "autoGenerateKey": undefined,
                  "label": "edX2",
                  "value": "edx2",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Maximum 70 characters. Recommended 50 or fewer characters.
                    </p>
                    <p>
                      An effective course title:
                    </p>
                    <ul>
                      <li>
                        Clearly indicates the course subject matter.
                      </li>
                      <li>
                        Follows search engine optimization (SEO) guidelines.
                      </li>
                      <li>
                        Targets a global audience.
                      </li>
                    </ul>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Example:
                      </b>
                    </p>
                    <p>
                      English Grammar and Essay Writing
                    </p>
                  </div>
                }
                id="title-label"
                optional={false}
                required={true}
                text="Title"
              />,
              "name": "title",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText="Cannot edit after submission"
                helpText={
                  <div>
                    <p>
                      Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                    </p>
                    <p>
                      If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                    <p>
                      <b>
                        Examples:
                      </b>
                    </p>
                    <ol>
                      <li>
                        CS002x
                      </li>
                      <li>
                        BIO1.1x, BIO1.2x
                      </li>
                    </ol>
                  </div>
                }
                id="number-label"
                optional={false}
                required={true}
                text="Number"
              />,
              "name": "number",
              "required": true,
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />,
                  "name": "enrollmentTrack",
                  "options": Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ],
                  "required": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": Symbol(react.fragment),
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "First run of your Course",
            },
            "ref": null,
            "rendered": "First run of your Course",
            "type": "h2",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create New Course
          </h2>,
          <hr />,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />
              }
              name="org"
              options={
                Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />
              }
              name="title"
              required={true}
              type="text"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />
              }
              name="number"
              required={true}
              type="text"
            />
            <React.Fragment>
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="enrollment-track-label"
                    optional={false}
                    required={true}
                    text="Enrollment track"
                  />
                }
                name="enrollmentTrack"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "verified",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "audit",
                    },
                    Object {
                      "label": "Professional Only",
                      "value": "professional",
                    },
                  ]
                }
                required={true}
              />
            </React.Fragment>
            <h2>
              First run of your Course
            </h2>
            <hr />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create New Course",
          },
          "ref": null,
          "rendered": "Create New Course",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText=""
                    id={null}
                    optional={false}
                    required={true}
                    text="Organization"
                  />
                }
                name="org"
                options={
                  Array [
                    Object {
                      "label": "Select organization",
                      "value": "",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX",
                      "value": "edx",
                    },
                    Object {
                      "autoGenerateKey": undefined,
                      "label": "edX2",
                      "value": "edx2",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Maximum 70 characters. Recommended 50 or fewer characters.
                        </p>
                        <p>
                          An effective course title:
                        </p>
                        <ul>
                          <li>
                            Clearly indicates the course subject matter.
                          </li>
                          <li>
                            Follows search engine optimization (SEO) guidelines.
                          </li>
                          <li>
                            Targets a global audience.
                          </li>
                        </ul>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Example:
                          </b>
                        </p>
                        <p>
                          English Grammar and Essay Writing
                        </p>
                      </div>
                    }
                    id="title-label"
                    optional={false}
                    required={true}
                    text="Title"
                  />
                }
                name="title"
                required={true}
                type="text"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText="Cannot edit after submission"
                    helpText={
                      <div>
                        <p>
                          Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                        </p>
                        <p>
                          If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                        <p>
                          <b>
                            Examples:
                          </b>
                        </p>
                        <ol>
                          <li>
                            CS002x
                          </li>
                          <li>
                            BIO1.1x, BIO1.2x
                          </li>
                        </ol>
                      </div>
                    }
                    id="number-label"
                    optional={false}
                    required={true}
                    text="Number"
                  />
                }
                name="number"
                required={true}
                type="text"
              />,
              <React.Fragment>
                <Field
                  component={[Function]}
                  label={
                    <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />
                  }
                  name="enrollmentTrack"
                  options={
                    Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ]
                  }
                  required={true}
                />
              </React.Fragment>,
              <h2>
                First run of your Course
              </h2>,
              <hr />,
              false,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              false,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText=""
                  id={null}
                  optional={false}
                  required={true}
                  text="Organization"
                />,
                "name": "org",
                "options": Array [
                  Object {
                    "label": "Select organization",
                    "value": "",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX",
                    "value": "edx",
                  },
                  Object {
                    "autoGenerateKey": undefined,
                    "label": "edX2",
                    "value": "edx2",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Maximum 70 characters. Recommended 50 or fewer characters.
                      </p>
                      <p>
                        An effective course title:
                      </p>
                      <ul>
                        <li>
                          Clearly indicates the course subject matter.
                        </li>
                        <li>
                          Follows search engine optimization (SEO) guidelines.
                        </li>
                        <li>
                          Targets a global audience.
                        </li>
                      </ul>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-title-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Example:
                        </b>
                      </p>
                      <p>
                        English Grammar and Essay Writing
                      </p>
                    </div>
                  }
                  id="title-label"
                  optional={false}
                  required={true}
                  text="Title"
                />,
                "name": "title",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText="Cannot edit after submission"
                  helpText={
                    <div>
                      <p>
                        Maximum 10 characters. Characters can be letters, numbers, periods, underscores, or hyphens.
                      </p>
                      <p>
                        If a course consists of several modules, the course number can have an ending such as .1x or .2x.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/set_up_course/planning_course_information/title_number_guidelines.html#course-number-guidelines"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                      <p>
                        <b>
                          Examples:
                        </b>
                      </p>
                      <ol>
                        <li>
                          CS002x
                        </li>
                        <li>
                          BIO1.1x, BIO1.2x
                        </li>
                      </ol>
                    </div>
                  }
                  id="number-label"
                  optional={false}
                  required={true}
                  text="Number"
                />,
                "name": "number",
                "required": true,
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    label={
                      <FieldLabel
                        className=""
                        extraText=""
                        helpText={
                          <div>
                            <p>
                              The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                            </p>
                            <p>
                              <a
                                href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                                rel="noopener noreferrer"
                                target="_blank"
                              >
                                Learn more.
                              </a>
                            </p>
                          </div>
                        }
                        id="enrollment-track-label"
                        optional={false}
                        required={true}
                        text="Enrollment track"
                      />
                    }
                    name="enrollmentTrack"
                    options={
                      Array [
                        Object {
                          "label": "Select enrollment track",
                          "value": "",
                        },
                        Object {
                          "label": "Verified and Audit",
                          "value": "verified",
                        },
                        Object {
                          "label": "Audit Only",
                          "value": "audit",
                        },
                        Object {
                          "label": "Professional Only",
                          "value": "professional",
                        },
                      ]
                    }
                    required={true}
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "label": <FieldLabel
                      className=""
                      extraText=""
                      helpText={
                        <div>
                          <p>
                            The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                          </p>
                          <p>
                            <a
                              href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                              rel="noopener noreferrer"
                              target="_blank"
                            >
                              Learn more.
                            </a>
                          </p>
                        </div>
                      }
                      id="enrollment-track-label"
                      optional={false}
                      required={true}
                      text="Enrollment track"
                    />,
                    "name": "enrollmentTrack",
                    "options": Array [
                      Object {
                        "label": "Select enrollment track",
                        "value": "",
                      },
                      Object {
                        "label": "Verified and Audit",
                        "value": "verified",
                      },
                      Object {
                        "label": "Audit Only",
                        "value": "audit",
                      },
                      Object {
                        "label": "Professional Only",
                        "value": "professional",
                      },
                    ],
                    "required": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "First run of your Course",
              },
              "ref": null,
              "rendered": "First run of your Course",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
