// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCoursePage renders html correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={Object {}}
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "organizations": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              onSubmit={[Function]}
              organizations={Array []}
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                onSubmit={[Function]}
                organizations={Array []}
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  onSubmit={[Function]}
                  organizations={Array []}
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": undefined,
                  "onSubmit": [Function],
                  "organizations": Array [],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                onSubmit={[Function]}
                organizations={Array []}
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  onSubmit={[Function]}
                  organizations={Array []}
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    onSubmit={[Function]}
                    organizations={Array []}
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": undefined,
                    "onSubmit": [Function],
                    "organizations": Array [],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly while fetching 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": null,
        "isFetching": true,
        "organizations": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <LoadingSpinner
            message="Loading…"
          />
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <LoadingSpinner
              message="Loading…"
            />,
            false,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "message": "Loading…",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <LoadingSpinner
              message="Loading…"
            />
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <LoadingSpinner
                message="Loading…"
              />,
              false,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "message": "Loading…",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with course create error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {},
        "error": Array [
          "Fail",
        ],
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": null,
        "isFetching": false,
        "organizations": Array [
          Object {
            "key": "edx",
            "name": "edX",
          },
          Object {
            "key": "edx2",
            "name": "edX2",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              isCreating={false}
              onSubmit={[Function]}
              organizations={
                Array [
                  Object {
                    "key": "edx",
                    "name": "edX",
                  },
                  Object {
                    "key": "edx2",
                    "name": "edX2",
                  },
                ]
              }
            />
            <StatusAlert
              alertType="danger"
              className=""
              dismissible={false}
              iconClassNames={Array []}
              id="create-error"
              message={
                Array [
                  "Fail",
                  <br />,
                ]
              }
              onClose={[Function]}
              title={null}
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
              <StatusAlert
                alertType="danger"
                className=""
                dismissible={false}
                iconClassNames={Array []}
                id="create-error"
                message={
                  Array [
                    "Fail",
                    <br />,
                  ]
                }
                onClose={[Function]}
                title={null}
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />,
                <StatusAlert
                  alertType="danger"
                  className=""
                  dismissible={false}
                  iconClassNames={Array []}
                  id="create-error"
                  message={
                    Array [
                      "Fail",
                      <br />,
                    ]
                  }
                  onClose={[Function]}
                  title={null}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": false,
                  "onSubmit": [Function],
                  "organizations": Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "alertType": "danger",
                  "className": "",
                  "dismissible": false,
                  "iconClassNames": Array [],
                  "id": "create-error",
                  "message": Array [
                    "Fail",
                    <br />,
                  ],
                  "onClose": [Function],
                  "title": null,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
              <StatusAlert
                alertType="danger"
                className=""
                dismissible={false}
                iconClassNames={Array []}
                id="create-error"
                message={
                  Array [
                    "Fail",
                    <br />,
                  ]
                }
                onClose={[Function]}
                title={null}
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />
                <StatusAlert
                  alertType="danger"
                  className=""
                  dismissible={false}
                  iconClassNames={Array []}
                  id="create-error"
                  message={
                    Array [
                      "Fail",
                      <br />,
                    ]
                  }
                  onClose={[Function]}
                  title={null}
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    isCreating={false}
                    onSubmit={[Function]}
                    organizations={
                      Array [
                        Object {
                          "key": "edx",
                          "name": "edX",
                        },
                        Object {
                          "key": "edx2",
                          "name": "edX2",
                        },
                      ]
                    }
                  />,
                  <StatusAlert
                    alertType="danger"
                    className=""
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message={
                      Array [
                        "Fail",
                        <br />,
                      ]
                    }
                    onClose={[Function]}
                    title={null}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": false,
                    "onSubmit": [Function],
                    "organizations": Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alertType": "danger",
                    "className": "",
                    "dismissible": false,
                    "iconClassNames": Array [],
                    "id": "create-error",
                    "message": Array [
                      "Fail",
                      <br />,
                    ],
                    "onClose": [Function],
                    "title": null,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with course create in progress 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {
          "uuid": "11111111-1111-1111-1111-111111111111",
        },
        "error": null,
        "isCreating": true,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": null,
        "isFetching": false,
        "organizations": Array [
          Object {
            "key": "edx",
            "name": "edX",
          },
          Object {
            "key": "edx2",
            "name": "edX2",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              isCreating={true}
              onSubmit={[Function]}
              organizations={
                Array [
                  Object {
                    "key": "edx",
                    "name": "edX",
                  },
                  Object {
                    "key": "edx2",
                    "name": "edX2",
                  },
                ]
              }
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={true}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={true}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": true,
                  "onSubmit": [Function],
                  "organizations": Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={true}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={true}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    isCreating={true}
                    onSubmit={[Function]}
                    organizations={
                      Array [
                        Object {
                          "key": "edx",
                          "name": "edX",
                        },
                        Object {
                          "key": "edx2",
                          "name": "edX2",
                        },
                      ]
                    }
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": true,
                    "onSubmit": [Function],
                    "organizations": Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with course create success 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {
          "uuid": "11111111-1111-1111-1111-111111111111",
        },
        "error": null,
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": null,
        "isFetching": false,
        "organizations": Array [
          Object {
            "key": "edx",
            "name": "edX",
          },
          Object {
            "key": "edx2",
            "name": "edX2",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              isCreating={false}
              onSubmit={[Function]}
              organizations={
                Array [
                  Object {
                    "key": "edx",
                    "name": "edX",
                  },
                  Object {
                    "key": "edx2",
                    "name": "edX2",
                  },
                ]
              }
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": false,
                  "onSubmit": [Function],
                  "organizations": Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    isCreating={false}
                    onSubmit={[Function]}
                    organizations={
                      Array [
                        Object {
                          "key": "edx",
                          "name": "edX",
                        },
                        Object {
                          "key": "edx2",
                          "name": "edX2",
                        },
                      ]
                    }
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": false,
                    "onSubmit": [Function],
                    "organizations": Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with no publisherUserInfo 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "alertType": "danger",
      "className": "",
      "dismissible": false,
      "iconClassNames": Array [],
      "id": "error",
      "message": "User information unavailable",
      "onClose": [Function],
      "title": "Course Create Form failed to load: ",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "alertType": "danger",
        "className": "",
        "dismissible": false,
        "iconClassNames": Array [],
        "id": "error",
        "message": "User information unavailable",
        "onClose": [Function],
        "title": "Course Create Form failed to load: ",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with org error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": Array [
          "Fail",
        ],
        "isFetching": false,
        "organizations": Array [
          Object {
            "key": "edx",
            "name": "edX",
          },
          Object {
            "key": "edx2",
            "name": "edX2",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              isCreating={false}
              onSubmit={[Function]}
              organizations={
                Array [
                  Object {
                    "key": "edx",
                    "name": "edX",
                  },
                  Object {
                    "key": "edx2",
                    "name": "edX2",
                  },
                ]
              }
            />
            <StatusAlert
              alertType="danger"
              className=""
              dismissible={false}
              iconClassNames={Array []}
              id="create-error"
              message={
                Array [
                  "Fail",
                  <br />,
                ]
              }
              onClose={[Function]}
              title={null}
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
              <StatusAlert
                alertType="danger"
                className=""
                dismissible={false}
                iconClassNames={Array []}
                id="create-error"
                message={
                  Array [
                    "Fail",
                    <br />,
                  ]
                }
                onClose={[Function]}
                title={null}
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />,
                <StatusAlert
                  alertType="danger"
                  className=""
                  dismissible={false}
                  iconClassNames={Array []}
                  id="create-error"
                  message={
                    Array [
                      "Fail",
                      <br />,
                    ]
                  }
                  onClose={[Function]}
                  title={null}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": false,
                  "onSubmit": [Function],
                  "organizations": Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "alertType": "danger",
                  "className": "",
                  "dismissible": false,
                  "iconClassNames": Array [],
                  "id": "create-error",
                  "message": Array [
                    "Fail",
                    <br />,
                  ],
                  "onClose": [Function],
                  "title": null,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
              <StatusAlert
                alertType="danger"
                className=""
                dismissible={false}
                iconClassNames={Array []}
                id="create-error"
                message={
                  Array [
                    "Fail",
                    <br />,
                  ]
                }
                onClose={[Function]}
                title={null}
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />
                <StatusAlert
                  alertType="danger"
                  className=""
                  dismissible={false}
                  iconClassNames={Array []}
                  id="create-error"
                  message={
                    Array [
                      "Fail",
                      <br />,
                    ]
                  }
                  onClose={[Function]}
                  title={null}
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    isCreating={false}
                    onSubmit={[Function]}
                    organizations={
                      Array [
                        Object {
                          "key": "edx",
                          "name": "edX",
                        },
                        Object {
                          "key": "edx2",
                          "name": "edX2",
                        },
                      ]
                    }
                  />,
                  <StatusAlert
                    alertType="danger"
                    className=""
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message={
                      Array [
                        "Fail",
                        <br />,
                      ]
                    }
                    onClose={[Function]}
                    title={null}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": false,
                    "onSubmit": [Function],
                    "organizations": Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alertType": "danger",
                    "className": "",
                    "dismissible": false,
                    "iconClassNames": Array [],
                    "id": "create-error",
                    "message": Array [
                      "Fail",
                      <br />,
                    ],
                    "onClose": [Function],
                    "title": null,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCoursePage renders page correctly with organizations 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCoursePage
    clearCourseInfoErrors={[Function]}
    clearCreateCourseStatus={[Function]}
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
      }
    }
    courseOptions={Object {}}
    courseRunOptions={Object {}}
    createCourse={[Function]}
    fetchCourseOptions={[Function]}
    fetchCourseRunOptions={[Function]}
    fetchOrganizations={[Function]}
    formValues={Object {}}
    initialValues={Object {}}
    publisherUserInfo={
      Object {
        "error": null,
        "isFetching": false,
        "organizations": Array [
          Object {
            "key": "edx",
            "name": "edX",
          },
          Object {
            "key": "edx2",
            "name": "edX2",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            Create a New Course
          </title>
        </HelmetWrapper>,
        <ConfirmationModal
          body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
          buttonLabel="Create"
          onClose={[Function]}
          onSubmit={[Function]}
          open={false}
          title="Create a New Course?"
        />,
        <PageContainer
          className=""
          wide={false}
        >
          <div>
            <ReduxForm
              courseOptions={Object {}}
              courseRunOptions={Object {}}
              currentFormValues={Object {}}
              id="create-course-form"
              initialValues={Object {}}
              isCreating={false}
              onSubmit={[Function]}
              organizations={
                Array [
                  Object {
                    "key": "edx",
                    "name": "edX",
                  },
                  Object {
                    "key": "edx2",
                    "name": "edX2",
                  },
                ]
              }
            />
          </div>
        </PageContainer>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <title>
            Create a New Course
          </title>,
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a New Course",
          },
          "ref": null,
          "rendered": "Create a New Course",
          "type": "title",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
          "buttonLabel": "Create",
          "onClose": [Function],
          "onSubmit": [Function],
          "open": false,
          "title": "Create a New Course?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>,
          ],
          "className": "",
          "sidePanes": undefined,
          "wide": false,
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "courseOptions": Object {},
                  "courseRunOptions": Object {},
                  "currentFormValues": Object {},
                  "id": "create-course-form",
                  "initialValues": Object {},
                  "isCreating": false,
                  "onSubmit": [Function],
                  "organizations": Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              Create a New Course
            </title>
          </HelmetWrapper>,
          <ConfirmationModal
            body="This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later."
            buttonLabel="Create"
            onClose={[Function]}
            onSubmit={[Function]}
            open={false}
            title="Create a New Course?"
          />,
          <PageContainer
            className=""
            wide={false}
          >
            <div>
              <ReduxForm
                courseOptions={Object {}}
                courseRunOptions={Object {}}
                currentFormValues={Object {}}
                id="create-course-form"
                initialValues={Object {}}
                isCreating={false}
                onSubmit={[Function]}
                organizations={
                  Array [
                    Object {
                      "key": "edx",
                      "name": "edX",
                    },
                    Object {
                      "key": "edx2",
                      "name": "edX2",
                    },
                  ]
                }
              />
            </div>
          </PageContainer>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              Create a New Course
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Create a New Course",
            },
            "ref": null,
            "rendered": "Create a New Course",
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "body": "This will create a new course in studio. Confirm that your course number is correct, as it cannot be changed later.",
            "buttonLabel": "Create",
            "onClose": [Function],
            "onSubmit": [Function],
            "open": false,
            "title": "Create a New Course?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <div>
                <ReduxForm
                  courseOptions={Object {}}
                  courseRunOptions={Object {}}
                  currentFormValues={Object {}}
                  id="create-course-form"
                  initialValues={Object {}}
                  isCreating={false}
                  onSubmit={[Function]}
                  organizations={
                    Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ]
                  }
                />
              </div>,
            ],
            "className": "",
            "sidePanes": undefined,
            "wide": false,
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <ReduxForm
                    courseOptions={Object {}}
                    courseRunOptions={Object {}}
                    currentFormValues={Object {}}
                    id="create-course-form"
                    initialValues={Object {}}
                    isCreating={false}
                    onSubmit={[Function]}
                    organizations={
                      Array [
                        Object {
                          "key": "edx",
                          "name": "edX",
                        },
                        Object {
                          "key": "edx2",
                          "name": "edX2",
                        },
                      ]
                    }
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "courseOptions": Object {},
                    "courseRunOptions": Object {},
                    "currentFormValues": Object {},
                    "id": "create-course-form",
                    "initialValues": Object {},
                    "isCreating": false,
                    "onSubmit": [Function],
                    "organizations": Array [
                      Object {
                        "key": "edx",
                        "name": "edX",
                      },
                      Object {
                        "key": "edx2",
                        "name": "edX2",
                      },
                    ],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
