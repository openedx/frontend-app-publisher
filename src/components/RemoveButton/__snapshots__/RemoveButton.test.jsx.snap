// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RemoveButton renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RemoveButton
    className="col-2"
    label="Test Label"
    onRemove={[MockFunction]}
    targetFieldNumber={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        aria-label="Test Label"
        className="close float-none mt-2"
        onClick={[Function]}
        type="button"
      >
        <WithDeprecatedProps(B)
          className={
            Array [
              "fa",
              "fa-close",
              "fa-2x",
              "text-danger",
            ]
          }
          id="remove-field"
        />
      </button>,
      "className": "col-2",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "aria-label": "Test Label",
        "children": <WithDeprecatedProps(B)
          className={
            Array [
              "fa",
              "fa-close",
              "fa-2x",
              "text-danger",
            ]
          }
          id="remove-field"
        />,
        "className": "close float-none mt-2",
        "onClick": [Function],
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": Array [
            "fa",
            "fa-close",
            "fa-2x",
            "text-danger",
          ],
          "id": "remove-field",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "button",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          aria-label="Test Label"
          className="close float-none mt-2"
          onClick={[Function]}
          type="button"
        >
          <WithDeprecatedProps(B)
            className={
              Array [
                "fa",
                "fa-close",
                "fa-2x",
                "text-danger",
              ]
            }
            id="remove-field"
          />
        </button>,
        "className": "col-2",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "Test Label",
          "children": <WithDeprecatedProps(B)
            className={
              Array [
                "fa",
                "fa-close",
                "fa-2x",
                "text-danger",
              ]
            }
            id="remove-field"
          />,
          "className": "close float-none mt-2",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": Array [
              "fa",
              "fa-close",
              "fa-2x",
              "text-danger",
            ],
            "id": "remove-field",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "button",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
