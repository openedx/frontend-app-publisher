// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CourseTable shows a table 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CourseTable />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="row justify-content-md-center"
      >
        <div
          className="col-md-10"
        >
          <div
            className="row justify-content-md-end"
          >
            <Link
              replace={false}
              to="/courses/new"
            >
              <button
                className="btn btn-outline-primary"
              >
                New Course
              </button>
            </Link>
          </div>
          <div
            className="row"
          >
            <div
              className="col"
            >
              <withRouter(Connect(TableComponent))
                className="courses"
                columns={
                  Array [
                    Object {
                      "columnSortable": true,
                      "key": "title",
                      "label": "Course Name",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "key",
                      "label": "Course Number",
                    },
                    Object {
                      "columnSortable": false,
                      "key": "owners",
                      "label": "Owner",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "modified",
                      "label": "Modified",
                    },
                  ]
                }
                fetchMethod={[Function]}
                formatData={[Function]}
                id="courses"
                tableSortable={true}
              />
            </div>
          </div>
        </div>
      </div>,
      "className": "container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="col-md-10"
        >
          <div
            className="row justify-content-md-end"
          >
            <Link
              replace={false}
              to="/courses/new"
            >
              <button
                className="btn btn-outline-primary"
              >
                New Course
              </button>
            </Link>
          </div>
          <div
            className="row"
          >
            <div
              className="col"
            >
              <withRouter(Connect(TableComponent))
                className="courses"
                columns={
                  Array [
                    Object {
                      "columnSortable": true,
                      "key": "title",
                      "label": "Course Name",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "key",
                      "label": "Course Number",
                    },
                    Object {
                      "columnSortable": false,
                      "key": "owners",
                      "label": "Owner",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "modified",
                      "label": "Modified",
                    },
                  ]
                }
                fetchMethod={[Function]}
                formatData={[Function]}
                id="courses"
                tableSortable={true}
              />
            </div>
          </div>
        </div>,
        "className": "row justify-content-md-center",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="row justify-content-md-end"
            >
              <Link
                replace={false}
                to="/courses/new"
              >
                <button
                  className="btn btn-outline-primary"
                >
                  New Course
                </button>
              </Link>
            </div>,
            <div
              className="row"
            >
              <div
                className="col"
              >
                <withRouter(Connect(TableComponent))
                  className="courses"
                  columns={
                    Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ]
                  }
                  fetchMethod={[Function]}
                  formatData={[Function]}
                  id="courses"
                  tableSortable={true}
                />
              </div>
            </div>,
          ],
          "className": "col-md-10",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/courses/new"
              >
                <button
                  className="btn btn-outline-primary"
                >
                  New Course
                </button>
              </Link>,
              "className": "row justify-content-md-end",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="btn btn-outline-primary"
                >
                  New Course
                </button>,
                "replace": false,
                "to": "/courses/new",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "New Course",
                  "className": "btn btn-outline-primary",
                },
                "ref": null,
                "rendered": "New Course",
                "type": "button",
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col"
              >
                <withRouter(Connect(TableComponent))
                  className="courses"
                  columns={
                    Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ]
                  }
                  fetchMethod={[Function]}
                  formatData={[Function]}
                  id="courses"
                  tableSortable={true}
                />
              </div>,
              "className": "row",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(TableComponent))
                  className="courses"
                  columns={
                    Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ]
                  }
                  fetchMethod={[Function]}
                  formatData={[Function]}
                  id="courses"
                  tableSortable={true}
                />,
                "className": "col",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "courses",
                  "columns": Array [
                    Object {
                      "columnSortable": true,
                      "key": "title",
                      "label": "Course Name",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "key",
                      "label": "Course Number",
                    },
                    Object {
                      "columnSortable": false,
                      "key": "owners",
                      "label": "Owner",
                    },
                    Object {
                      "columnSortable": true,
                      "key": "modified",
                      "label": "Modified",
                    },
                  ],
                  "fetchMethod": [Function],
                  "formatData": [Function],
                  "id": "courses",
                  "tableSortable": true,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="row justify-content-md-center"
        >
          <div
            className="col-md-10"
          >
            <div
              className="row justify-content-md-end"
            >
              <Link
                replace={false}
                to="/courses/new"
              >
                <button
                  className="btn btn-outline-primary"
                >
                  New Course
                </button>
              </Link>
            </div>
            <div
              className="row"
            >
              <div
                className="col"
              >
                <withRouter(Connect(TableComponent))
                  className="courses"
                  columns={
                    Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ]
                  }
                  fetchMethod={[Function]}
                  formatData={[Function]}
                  id="courses"
                  tableSortable={true}
                />
              </div>
            </div>
          </div>
        </div>,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-md-10"
          >
            <div
              className="row justify-content-md-end"
            >
              <Link
                replace={false}
                to="/courses/new"
              >
                <button
                  className="btn btn-outline-primary"
                >
                  New Course
                </button>
              </Link>
            </div>
            <div
              className="row"
            >
              <div
                className="col"
              >
                <withRouter(Connect(TableComponent))
                  className="courses"
                  columns={
                    Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ]
                  }
                  fetchMethod={[Function]}
                  formatData={[Function]}
                  id="courses"
                  tableSortable={true}
                />
              </div>
            </div>
          </div>,
          "className": "row justify-content-md-center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="row justify-content-md-end"
              >
                <Link
                  replace={false}
                  to="/courses/new"
                >
                  <button
                    className="btn btn-outline-primary"
                  >
                    New Course
                  </button>
                </Link>
              </div>,
              <div
                className="row"
              >
                <div
                  className="col"
                >
                  <withRouter(Connect(TableComponent))
                    className="courses"
                    columns={
                      Array [
                        Object {
                          "columnSortable": true,
                          "key": "title",
                          "label": "Course Name",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "key",
                          "label": "Course Number",
                        },
                        Object {
                          "columnSortable": false,
                          "key": "owners",
                          "label": "Owner",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "modified",
                          "label": "Modified",
                        },
                      ]
                    }
                    fetchMethod={[Function]}
                    formatData={[Function]}
                    id="courses"
                    tableSortable={true}
                  />
                </div>
              </div>,
            ],
            "className": "col-md-10",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/courses/new"
                >
                  <button
                    className="btn btn-outline-primary"
                  >
                    New Course
                  </button>
                </Link>,
                "className": "row justify-content-md-end",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                  >
                    New Course
                  </button>,
                  "replace": false,
                  "to": "/courses/new",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "New Course",
                    "className": "btn btn-outline-primary",
                  },
                  "ref": null,
                  "rendered": "New Course",
                  "type": "button",
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="col"
                >
                  <withRouter(Connect(TableComponent))
                    className="courses"
                    columns={
                      Array [
                        Object {
                          "columnSortable": true,
                          "key": "title",
                          "label": "Course Name",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "key",
                          "label": "Course Number",
                        },
                        Object {
                          "columnSortable": false,
                          "key": "owners",
                          "label": "Owner",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "modified",
                          "label": "Modified",
                        },
                      ]
                    }
                    fetchMethod={[Function]}
                    formatData={[Function]}
                    id="courses"
                    tableSortable={true}
                  />
                </div>,
                "className": "row",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <withRouter(Connect(TableComponent))
                    className="courses"
                    columns={
                      Array [
                        Object {
                          "columnSortable": true,
                          "key": "title",
                          "label": "Course Name",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "key",
                          "label": "Course Number",
                        },
                        Object {
                          "columnSortable": false,
                          "key": "owners",
                          "label": "Owner",
                        },
                        Object {
                          "columnSortable": true,
                          "key": "modified",
                          "label": "Modified",
                        },
                      ]
                    }
                    fetchMethod={[Function]}
                    formatData={[Function]}
                    id="courses"
                    tableSortable={true}
                  />,
                  "className": "col",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "courses",
                    "columns": Array [
                      Object {
                        "columnSortable": true,
                        "key": "title",
                        "label": "Course Name",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "key",
                        "label": "Course Number",
                      },
                      Object {
                        "columnSortable": false,
                        "key": "owners",
                        "label": "Owner",
                      },
                      Object {
                        "columnSortable": true,
                        "key": "modified",
                        "label": "Modified",
                      },
                    ],
                    "fetchMethod": [Function],
                    "formatData": [Function],
                    "id": "courses",
                    "tableSortable": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
