// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Areas Of Expertise renders correctly when given fields 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AreasOfExpertise
    fields={
      Array [
        Object {},
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          className="btn btn-light js-add-button"
          onClick={[Function]}
          type="button"
        >
          Add area of expertise
        </button>,
        <ul
          className="list-group p-0 m-0"
        >
          <li
            className="area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0"
          >
            <div
              className="col-10"
            >
              <Field
                component={[Function]}
                label={
                  <React.Fragment>
                    Area of expertise
                    <span
                      aria-hidden={true}
                      className="required"
                    >
                      *
                    </span>
                  </React.Fragment>
                }
                name="[object Object].value"
                required={true}
                type="text"
              />
            </div>
            <input
              name="[object Object].id"
              type="hidden"
            />
            <RemoveButton
              className=""
              label="Remove area of expertise"
              onRemove={[Function]}
              targetFieldNumber={0}
            />
          </li>
        </ul>,
      ],
      "className": "areas-of-expertise my-4",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add area of expertise",
          "className": "btn btn-light js-add-button",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": "Add area of expertise",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <li
              className="area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0"
            >
              <div
                className="col-10"
              >
                <Field
                  component={[Function]}
                  label={
                    <React.Fragment>
                      Area of expertise
                      <span
                        aria-hidden={true}
                        className="required"
                      >
                        *
                      </span>
                    </React.Fragment>
                  }
                  name="[object Object].value"
                  required={true}
                  type="text"
                />
              </div>
              <input
                name="[object Object].id"
                type="hidden"
              />
              <RemoveButton
                className=""
                label="Remove area of expertise"
                onRemove={[Function]}
                targetFieldNumber={0}
              />
            </li>,
          ],
          "className": "list-group p-0 m-0",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "[object Object]",
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="col-10"
                >
                  <Field
                    component={[Function]}
                    label={
                      <React.Fragment>
                        Area of expertise
                        <span
                          aria-hidden={true}
                          className="required"
                        >
                          *
                        </span>
                      </React.Fragment>
                    }
                    name="[object Object].value"
                    required={true}
                    type="text"
                  />
                </div>,
                <input
                  name="[object Object].id"
                  type="hidden"
                />,
                <RemoveButton
                  className=""
                  label="Remove area of expertise"
                  onRemove={[Function]}
                  targetFieldNumber={0}
                />,
              ],
              "className": "area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Field
                    component={[Function]}
                    label={
                      <React.Fragment>
                        Area of expertise
                        <span
                          aria-hidden={true}
                          className="required"
                        >
                          *
                        </span>
                      </React.Fragment>
                    }
                    name="[object Object].value"
                    required={true}
                    type="text"
                  />,
                  "className": "col-10",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "label": <React.Fragment>
                      Area of expertise
                      <span
                        aria-hidden={true}
                        className="required"
                      >
                        *
                      </span>
                    </React.Fragment>,
                    "name": "[object Object].value",
                    "required": true,
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "name": "[object Object].id",
                  "type": "hidden",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "label": "Remove area of expertise",
                  "onRemove": [Function],
                  "targetFieldNumber": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "li",
          },
        ],
        "type": "ul",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="btn btn-light js-add-button"
            onClick={[Function]}
            type="button"
          >
            Add area of expertise
          </button>,
          <ul
            className="list-group p-0 m-0"
          >
            <li
              className="area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0"
            >
              <div
                className="col-10"
              >
                <Field
                  component={[Function]}
                  label={
                    <React.Fragment>
                      Area of expertise
                      <span
                        aria-hidden={true}
                        className="required"
                      >
                        *
                      </span>
                    </React.Fragment>
                  }
                  name="[object Object].value"
                  required={true}
                  type="text"
                />
              </div>
              <input
                name="[object Object].id"
                type="hidden"
              />
              <RemoveButton
                className=""
                label="Remove area of expertise"
                onRemove={[Function]}
                targetFieldNumber={0}
              />
            </li>
          </ul>,
        ],
        "className": "areas-of-expertise my-4",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add area of expertise",
            "className": "btn btn-light js-add-button",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Add area of expertise",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <li
                className="area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0"
              >
                <div
                  className="col-10"
                >
                  <Field
                    component={[Function]}
                    label={
                      <React.Fragment>
                        Area of expertise
                        <span
                          aria-hidden={true}
                          className="required"
                        >
                          *
                        </span>
                      </React.Fragment>
                    }
                    name="[object Object].value"
                    required={true}
                    type="text"
                  />
                </div>
                <input
                  name="[object Object].id"
                  type="hidden"
                />
                <RemoveButton
                  className=""
                  label="Remove area of expertise"
                  onRemove={[Function]}
                  targetFieldNumber={0}
                />
              </li>,
            ],
            "className": "list-group p-0 m-0",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "[object Object]",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-10"
                  >
                    <Field
                      component={[Function]}
                      label={
                        <React.Fragment>
                          Area of expertise
                          <span
                            aria-hidden={true}
                            className="required"
                          >
                            *
                          </span>
                        </React.Fragment>
                      }
                      name="[object Object].value"
                      required={true}
                      type="text"
                    />
                  </div>,
                  <input
                    name="[object Object].id"
                    type="hidden"
                  />,
                  <RemoveButton
                    className=""
                    label="Remove area of expertise"
                    onRemove={[Function]}
                    targetFieldNumber={0}
                  />,
                ],
                "className": "area-of-expertise list-group-item row d-flex align-items-center px-0 mx-0",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Field
                      component={[Function]}
                      label={
                        <React.Fragment>
                          Area of expertise
                          <span
                            aria-hidden={true}
                            className="required"
                          >
                            *
                          </span>
                        </React.Fragment>
                      }
                      name="[object Object].value"
                      required={true}
                      type="text"
                    />,
                    "className": "col-10",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "label": <React.Fragment>
                        Area of expertise
                        <span
                          aria-hidden={true}
                          className="required"
                        >
                          *
                        </span>
                      </React.Fragment>,
                      "name": "[object Object].value",
                      "required": true,
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "name": "[object Object].id",
                    "type": "hidden",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "label": "Remove area of expertise",
                    "onRemove": [Function],
                    "targetFieldNumber": 0,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "li",
            },
          ],
          "type": "ul",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Areas Of Expertise renders correctly with no fields 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AreasOfExpertise
    fields={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          className="btn btn-light js-add-button"
          onClick={[Function]}
          type="button"
        >
          Add area of expertise
        </button>,
        <ul
          className="list-group p-0 m-0"
        />,
      ],
      "className": "areas-of-expertise my-4",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add area of expertise",
          "className": "btn btn-light js-add-button",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": "Add area of expertise",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": "list-group p-0 m-0",
        },
        "ref": null,
        "rendered": Array [],
        "type": "ul",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="btn btn-light js-add-button"
            onClick={[Function]}
            type="button"
          >
            Add area of expertise
          </button>,
          <ul
            className="list-group p-0 m-0"
          />,
        ],
        "className": "areas-of-expertise my-4",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add area of expertise",
            "className": "btn btn-light js-add-button",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": "Add area of expertise",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "list-group p-0 m-0",
          },
          "ref": null,
          "rendered": Array [],
          "type": "ul",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
