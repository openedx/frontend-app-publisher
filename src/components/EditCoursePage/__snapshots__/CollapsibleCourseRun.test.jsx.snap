// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Collapsible Course Run renders correctly when given a published course run 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapsibleCourseRun
    courseId="test-course"
    courseInReview={false}
    courseRun={
      Object {
        "content_language": "ar-ae",
        "end": "2010/01/01",
        "go_live_date": "1999/12/31",
        "key": "edX101+DemoX",
        "max_effort": 1,
        "min_effort": 1,
        "pacing_type": "self_paced",
        "start": "2000-01-01T12:00:00Z",
        "status": "published",
        "transcript_languages": Array [
          "ar-ae",
        ],
        "weeks_to_complete": 1,
      }
    }
    courseSubmitting={false}
    courseUuid="11111111-1111-1111-1111-111111111111"
    isSubmittingForReview={false}
    languageOptions={
      Array [
        Object {
          "label": "Arabic - United Arab Emirates",
          "value": "ar-ae",
        },
      ]
    }
    owners={Array []}
    pacingTypeOptions={
      Array [
        Object {
          "label": "Self-paced",
          "value": "self_paced",
        },
      ]
    }
    sourceInfo={Object {}}
    stafferInfo={Object {}}
    targetRun={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />
          }
          name="test-course.start"
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />
          }
          name="test-course.end"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />
          }
          name="test-course.go_live_date"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={false}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />
          }
          name="test-course.min_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />
          }
          name="test-course.max_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />
          }
          name="test-course.pacing_type"
          options={
            Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ]
          }
          required={false}
          type="text"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />
          }
          name="test-course.content_language"
          options={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          required={false}
          type="text"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={true}
          text="Transcript languages"
        />,
        <FieldArray
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          languageOptions={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          name="test-course.transcript_languages"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />
          }
          name="test-course.weeks_to_complete"
          required={false}
          type="number"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText={
            <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>
          }
          id="test-course.staff.label"
          required={false}
          requiredForSubmit={true}
          text="Staff"
        />,
        <Field
          component={[Function]}
          courseRunKey="edX101+DemoX"
          courseUuid="11111111-1111-1111-1111-111111111111"
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          name="test-course.staff"
          owners={Array []}
          sourceInfo={Object {}}
          stafferInfo={Object {}}
        />,
        <ButtonToolbar
          className=""
        >
          <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />
        </ButtonToolbar>,
      ],
      "expandedTitle": undefined,
      "iconId": "collapsible-icon-test-course",
      "isCollapsible": undefined,
      "isOpen": false,
      "onToggle": [Function],
      "title": <div
        className="course-run-label"
      >
        <span>
          Course run starting on Jan 1st 2000 - Self Paced
        </span>
        <Pill
          statuses={
            Array [
              "published",
            ]
          }
        />
        <div
          className="course-run-studio-url"
        >
          Studio URL - 
          <a
            href="undefined/course/edX101+DemoX"
          >
            edX101+DemoX
          </a>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Start on a Tuesday, Wednesday, or Thursday.
                </p>
                <p>
                  Avoid major U.S. holidays.
                </p>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.start.label"
            required={true}
            requiredForSubmit={true}
            text="Start date"
          />,
          "name": "test-course.start",
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.end.label"
            required={true}
            requiredForSubmit={true}
            text="End date"
          />,
          "name": "test-course.end",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The scheduled date for when the course run will be live and published.
                </p>
                <p>
                  If you would like the run to be published as soon as possible, do not set a publish date.
                </p>
              </div>
            }
            id="test-course.go_live_date.label"
            required={false}
            requiredForSubmit={true}
            text="Publish date"
          />,
          "name": "test-course.go_live_date",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": false,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The minimum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.min_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Minimum effort"
          />,
          "name": "test-course.min_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The maximum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.max_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Maximum effort"
          />,
          "name": "test-course.max_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                </p>
                <p>
                  Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                </p>
              </div>
            }
            id="test-course.pacing_type.label"
            required={false}
            requiredForSubmit={false}
            text="Course pacing"
          />,
          "name": "test-course.pacing_type",
          "options": Array [
            Object {
              "label": "Self-paced",
              "value": "self_paced",
            },
          ],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Content language"
          />,
          "name": "test-course.content_language",
          "options": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": true,
          "text": "Transcript languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "languageOptions": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "name": "test-course.transcript_languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The length of the course, in weeks, rounded to the nearest whole number.
                </p>
              </div>
            }
            id="test-course.weeks_to_complete.label"
            required={false}
            requiredForSubmit={true}
            text="Length"
          />,
          "name": "test-course.weeks_to_complete",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": <div>
            <p>
              The primary instructor or instructors for the course.
            </p>
            <p>
              The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
            </p>
          </div>,
          "id": "test-course.staff.label",
          "required": false,
          "requiredForSubmit": true,
          "text": "Staff",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "courseRunKey": "edX101+DemoX",
          "courseUuid": "11111111-1111-1111-1111-111111111111",
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "name": "test-course.staff",
          "owners": Array [],
          "sourceInfo": Object {},
          "stafferInfo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "disabled": false,
            "labels": Object {
              "default": "Publish Run",
              "pending": "Publishing Run",
            },
            "onClick": [Function],
            "primary": true,
            "state": "default",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.start.label"
                required={true}
                requiredForSubmit={true}
                text="Start date"
              />
            }
            name="test-course.start"
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.end.label"
                required={true}
                requiredForSubmit={true}
                text="End date"
              />
            }
            name="test-course.end"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The scheduled date for when the course run will be live and published.
                    </p>
                    <p>
                      If you would like the run to be published as soon as possible, do not set a publish date.
                    </p>
                  </div>
                }
                id="test-course.go_live_date.label"
                required={false}
                requiredForSubmit={true}
                text="Publish date"
              />
            }
            name="test-course.go_live_date"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={false}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The minimum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.min_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Minimum effort"
              />
            }
            name="test-course.min_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The maximum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.max_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Maximum effort"
              />
            }
            name="test-course.max_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="test-course.pacing_type.label"
                required={false}
                requiredForSubmit={false}
                text="Course pacing"
              />
            }
            name="test-course.pacing_type"
            options={
              Array [
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            required={false}
            type="text"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                required={false}
                requiredForSubmit={true}
                text="Content language"
              />
            }
            name="test-course.content_language"
            options={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            required={false}
            type="text"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Transcript languages"
          />,
          <FieldArray
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            languageOptions={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            name="test-course.transcript_languages"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The length of the course, in weeks, rounded to the nearest whole number.
                    </p>
                  </div>
                }
                id="test-course.weeks_to_complete.label"
                required={false}
                requiredForSubmit={true}
                text="Length"
              />
            }
            name="test-course.weeks_to_complete"
            required={false}
            type="number"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText={
              <div>
                <p>
                  The primary instructor or instructors for the course.
                </p>
                <p>
                  The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
                </p>
              </div>
            }
            id="test-course.staff.label"
            required={false}
            requiredForSubmit={true}
            text="Staff"
          />,
          <Field
            component={[Function]}
            courseRunKey="edX101+DemoX"
            courseUuid="11111111-1111-1111-1111-111111111111"
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            name="test-course.staff"
            owners={Array []}
            sourceInfo={Object {}}
            stafferInfo={Object {}}
          />,
          <ButtonToolbar
            className=""
          >
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Publish Run",
                  "pending": "Publishing Run",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />
          </ButtonToolbar>,
        ],
        "expandedTitle": undefined,
        "iconId": "collapsible-icon-test-course",
        "isCollapsible": undefined,
        "isOpen": false,
        "onToggle": [Function],
        "title": <div
          className="course-run-label"
        >
          <span>
            Course run starting on Jan 1st 2000 - Self Paced
          </span>
          <Pill
            statuses={
              Array [
                "published",
              ]
            }
          />
          <div
            className="course-run-studio-url"
          >
            Studio URL - 
            <a
              href="undefined/course/edX101+DemoX"
            >
              edX101+DemoX
            </a>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />,
            "name": "test-course.start",
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />,
            "name": "test-course.end",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />,
            "name": "test-course.go_live_date",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": false,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />,
            "name": "test-course.min_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />,
            "name": "test-course.max_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />,
            "name": "test-course.pacing_type",
            "options": Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />,
            "name": "test-course.content_language",
            "options": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": true,
            "text": "Transcript languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "languageOptions": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "name": "test-course.transcript_languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />,
            "name": "test-course.weeks_to_complete",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>,
            "id": "test-course.staff.label",
            "required": false,
            "requiredForSubmit": true,
            "text": "Staff",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "courseRunKey": "edX101+DemoX",
            "courseUuid": "11111111-1111-1111-1111-111111111111",
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "name": "test-course.staff",
            "owners": Array [],
            "sourceInfo": Object {},
            "stafferInfo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Publish Run",
                  "pending": "Publishing Run",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "disabled": false,
              "labels": Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              },
              "onClick": [Function],
              "primary": true,
              "state": "default",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Collapsible Course Run renders correctly when given an unpublished course run 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapsibleCourseRun
    courseId="test-course"
    courseInReview={false}
    courseRun={
      Object {
        "content_language": "ar-ae",
        "end": "2010/01/01",
        "go_live_date": "1999/12/31",
        "key": "edX101+DemoX",
        "max_effort": 1,
        "min_effort": 1,
        "pacing_type": "self_paced",
        "start": "2000-01-01T12:00:00Z",
        "status": "unpublished",
        "transcript_languages": Array [
          "ar-ae",
        ],
        "weeks_to_complete": 1,
      }
    }
    courseSubmitting={false}
    courseUuid="11111111-1111-1111-1111-111111111111"
    isSubmittingForReview={false}
    languageOptions={
      Array [
        Object {
          "label": "Arabic - United Arab Emirates",
          "value": "ar-ae",
        },
      ]
    }
    owners={Array []}
    pacingTypeOptions={
      Array [
        Object {
          "label": "Self-paced",
          "value": "self_paced",
        },
      ]
    }
    sourceInfo={Object {}}
    stafferInfo={Object {}}
    targetRun={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />
          }
          name="test-course.start"
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />
          }
          name="test-course.end"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />
          }
          name="test-course.go_live_date"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={false}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />
          }
          name="test-course.min_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />
          }
          name="test-course.max_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />
          }
          name="test-course.pacing_type"
          options={
            Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ]
          }
          required={false}
          type="text"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />
          }
          name="test-course.content_language"
          options={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          required={false}
          type="text"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={true}
          text="Transcript languages"
        />,
        <FieldArray
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          languageOptions={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          name="test-course.transcript_languages"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />
          }
          name="test-course.weeks_to_complete"
          required={false}
          type="number"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText={
            <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>
          }
          id="test-course.staff.label"
          required={false}
          requiredForSubmit={true}
          text="Staff"
        />,
        <Field
          component={[Function]}
          courseRunKey="edX101+DemoX"
          courseUuid="11111111-1111-1111-1111-111111111111"
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          name="test-course.staff"
          owners={Array []}
          sourceInfo={Object {}}
          stafferInfo={Object {}}
        />,
        <ButtonToolbar
          className=""
        >
          <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />
        </ButtonToolbar>,
      ],
      "expandedTitle": undefined,
      "iconId": "collapsible-icon-test-course",
      "isCollapsible": undefined,
      "isOpen": false,
      "onToggle": [Function],
      "title": <div
        className="course-run-label"
      >
        <span>
          Course run starting on Jan 1st 2000 - Self Paced
        </span>
        <Pill
          statuses={
            Array [
              "unpublished",
            ]
          }
        />
        <div
          className="course-run-studio-url"
        >
          Studio URL - 
          <a
            href="undefined/course/edX101+DemoX"
          >
            edX101+DemoX
          </a>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Start on a Tuesday, Wednesday, or Thursday.
                </p>
                <p>
                  Avoid major U.S. holidays.
                </p>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.start.label"
            required={true}
            requiredForSubmit={true}
            text="Start date"
          />,
          "name": "test-course.start",
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.end.label"
            required={true}
            requiredForSubmit={true}
            text="End date"
          />,
          "name": "test-course.end",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The scheduled date for when the course run will be live and published.
                </p>
                <p>
                  If you would like the run to be published as soon as possible, do not set a publish date.
                </p>
              </div>
            }
            id="test-course.go_live_date.label"
            required={false}
            requiredForSubmit={true}
            text="Publish date"
          />,
          "name": "test-course.go_live_date",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": false,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The minimum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.min_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Minimum effort"
          />,
          "name": "test-course.min_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The maximum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.max_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Maximum effort"
          />,
          "name": "test-course.max_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                </p>
                <p>
                  Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                </p>
              </div>
            }
            id="test-course.pacing_type.label"
            required={false}
            requiredForSubmit={false}
            text="Course pacing"
          />,
          "name": "test-course.pacing_type",
          "options": Array [
            Object {
              "label": "Self-paced",
              "value": "self_paced",
            },
          ],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Content language"
          />,
          "name": "test-course.content_language",
          "options": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": true,
          "text": "Transcript languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "languageOptions": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "name": "test-course.transcript_languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The length of the course, in weeks, rounded to the nearest whole number.
                </p>
              </div>
            }
            id="test-course.weeks_to_complete.label"
            required={false}
            requiredForSubmit={true}
            text="Length"
          />,
          "name": "test-course.weeks_to_complete",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": <div>
            <p>
              The primary instructor or instructors for the course.
            </p>
            <p>
              The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
            </p>
          </div>,
          "id": "test-course.staff.label",
          "required": false,
          "requiredForSubmit": true,
          "text": "Staff",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "courseRunKey": "edX101+DemoX",
          "courseUuid": "11111111-1111-1111-1111-111111111111",
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "name": "test-course.staff",
          "owners": Array [],
          "sourceInfo": Object {},
          "stafferInfo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "disabled": false,
            "labels": Object {
              "default": "Submit Run for Review",
              "pending": "Submitting Run for Review",
            },
            "onClick": [Function],
            "primary": true,
            "state": "default",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.start.label"
                required={true}
                requiredForSubmit={true}
                text="Start date"
              />
            }
            name="test-course.start"
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.end.label"
                required={true}
                requiredForSubmit={true}
                text="End date"
              />
            }
            name="test-course.end"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The scheduled date for when the course run will be live and published.
                    </p>
                    <p>
                      If you would like the run to be published as soon as possible, do not set a publish date.
                    </p>
                  </div>
                }
                id="test-course.go_live_date.label"
                required={false}
                requiredForSubmit={true}
                text="Publish date"
              />
            }
            name="test-course.go_live_date"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={false}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The minimum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.min_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Minimum effort"
              />
            }
            name="test-course.min_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The maximum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.max_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Maximum effort"
              />
            }
            name="test-course.max_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="test-course.pacing_type.label"
                required={false}
                requiredForSubmit={false}
                text="Course pacing"
              />
            }
            name="test-course.pacing_type"
            options={
              Array [
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            required={false}
            type="text"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                required={false}
                requiredForSubmit={true}
                text="Content language"
              />
            }
            name="test-course.content_language"
            options={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            required={false}
            type="text"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Transcript languages"
          />,
          <FieldArray
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            languageOptions={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            name="test-course.transcript_languages"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The length of the course, in weeks, rounded to the nearest whole number.
                    </p>
                  </div>
                }
                id="test-course.weeks_to_complete.label"
                required={false}
                requiredForSubmit={true}
                text="Length"
              />
            }
            name="test-course.weeks_to_complete"
            required={false}
            type="number"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText={
              <div>
                <p>
                  The primary instructor or instructors for the course.
                </p>
                <p>
                  The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
                </p>
              </div>
            }
            id="test-course.staff.label"
            required={false}
            requiredForSubmit={true}
            text="Staff"
          />,
          <Field
            component={[Function]}
            courseRunKey="edX101+DemoX"
            courseUuid="11111111-1111-1111-1111-111111111111"
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            name="test-course.staff"
            owners={Array []}
            sourceInfo={Object {}}
            stafferInfo={Object {}}
          />,
          <ButtonToolbar
            className=""
          >
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />
          </ButtonToolbar>,
        ],
        "expandedTitle": undefined,
        "iconId": "collapsible-icon-test-course",
        "isCollapsible": undefined,
        "isOpen": false,
        "onToggle": [Function],
        "title": <div
          className="course-run-label"
        >
          <span>
            Course run starting on Jan 1st 2000 - Self Paced
          </span>
          <Pill
            statuses={
              Array [
                "unpublished",
              ]
            }
          />
          <div
            className="course-run-studio-url"
          >
            Studio URL - 
            <a
              href="undefined/course/edX101+DemoX"
            >
              edX101+DemoX
            </a>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />,
            "name": "test-course.start",
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />,
            "name": "test-course.end",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />,
            "name": "test-course.go_live_date",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": false,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />,
            "name": "test-course.min_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />,
            "name": "test-course.max_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />,
            "name": "test-course.pacing_type",
            "options": Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />,
            "name": "test-course.content_language",
            "options": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": true,
            "text": "Transcript languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "languageOptions": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "name": "test-course.transcript_languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />,
            "name": "test-course.weeks_to_complete",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>,
            "id": "test-course.staff.label",
            "required": false,
            "requiredForSubmit": true,
            "text": "Staff",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "courseRunKey": "edX101+DemoX",
            "courseUuid": "11111111-1111-1111-1111-111111111111",
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "name": "test-course.staff",
            "owners": Array [],
            "sourceInfo": Object {},
            "stafferInfo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "disabled": false,
              "labels": Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              },
              "onClick": [Function],
              "primary": true,
              "state": "default",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Collapsible Course Run renders correctly when submitting for review 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapsibleCourseRun
    courseId="test-course"
    courseInReview={false}
    courseRun={
      Object {
        "content_language": "ar-ae",
        "end": "2010/01/01",
        "go_live_date": "1999/12/31",
        "key": "edX101+DemoX",
        "max_effort": 1,
        "min_effort": 1,
        "pacing_type": "self_paced",
        "start": "2000-01-01T12:00:00Z",
        "status": "unpublished",
        "transcript_languages": Array [
          "ar-ae",
        ],
        "weeks_to_complete": 1,
      }
    }
    courseSubmitting={false}
    courseUuid="11111111-1111-1111-1111-111111111111"
    isSubmittingForReview={true}
    languageOptions={
      Array [
        Object {
          "label": "Arabic - United Arab Emirates",
          "value": "ar-ae",
        },
      ]
    }
    owners={Array []}
    pacingTypeOptions={
      Array [
        Object {
          "label": "Self-paced",
          "value": "self_paced",
        },
      ]
    }
    sourceInfo={Object {}}
    stafferInfo={Object {}}
    targetRun={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />
          }
          name="test-course.start"
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />
          }
          name="test-course.end"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />
          }
          name="test-course.go_live_date"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={null}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />
          }
          name="test-course.min_effort"
          required={null}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />
          }
          name="test-course.max_effort"
          required={null}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />
          }
          name="test-course.pacing_type"
          options={
            Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ]
          }
          required={null}
          type="text"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />
          }
          name="test-course.content_language"
          options={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          required={null}
          type="text"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={true}
          text="Transcript languages"
        />,
        <FieldArray
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          languageOptions={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          name="test-course.transcript_languages"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />
          }
          name="test-course.weeks_to_complete"
          required={null}
          type="number"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText={
            <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>
          }
          id="test-course.staff.label"
          required={false}
          requiredForSubmit={true}
          text="Staff"
        />,
        <Field
          component={[Function]}
          courseRunKey="edX101+DemoX"
          courseUuid="11111111-1111-1111-1111-111111111111"
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          name="test-course.staff"
          owners={Array []}
          sourceInfo={Object {}}
          stafferInfo={Object {}}
        />,
        <ButtonToolbar
          className=""
        >
          <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />
        </ButtonToolbar>,
      ],
      "expandedTitle": undefined,
      "iconId": "collapsible-icon-test-course",
      "isCollapsible": undefined,
      "isOpen": false,
      "onToggle": [Function],
      "title": <div
        className="course-run-label"
      >
        <span>
          Course run starting on Jan 1st 2000 - Self Paced
        </span>
        <Pill
          statuses={
            Array [
              "unpublished",
            ]
          }
        />
        <div
          className="course-run-studio-url"
        >
          Studio URL - 
          <a
            href="undefined/course/edX101+DemoX"
          >
            edX101+DemoX
          </a>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Start on a Tuesday, Wednesday, or Thursday.
                </p>
                <p>
                  Avoid major U.S. holidays.
                </p>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.start.label"
            required={true}
            requiredForSubmit={true}
            text="Start date"
          />,
          "name": "test-course.start",
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.end.label"
            required={true}
            requiredForSubmit={true}
            text="End date"
          />,
          "name": "test-course.end",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The scheduled date for when the course run will be live and published.
                </p>
                <p>
                  If you would like the run to be published as soon as possible, do not set a publish date.
                </p>
              </div>
            }
            id="test-course.go_live_date.label"
            required={false}
            requiredForSubmit={true}
            text="Publish date"
          />,
          "name": "test-course.go_live_date",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": null,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The minimum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.min_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Minimum effort"
          />,
          "name": "test-course.min_effort",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The maximum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.max_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Maximum effort"
          />,
          "name": "test-course.max_effort",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                </p>
                <p>
                  Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                </p>
              </div>
            }
            id="test-course.pacing_type.label"
            required={false}
            requiredForSubmit={false}
            text="Course pacing"
          />,
          "name": "test-course.pacing_type",
          "options": Array [
            Object {
              "label": "Self-paced",
              "value": "self_paced",
            },
          ],
          "required": null,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Content language"
          />,
          "name": "test-course.content_language",
          "options": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "required": null,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": true,
          "text": "Transcript languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "languageOptions": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "name": "test-course.transcript_languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The length of the course, in weeks, rounded to the nearest whole number.
                </p>
              </div>
            }
            id="test-course.weeks_to_complete.label"
            required={false}
            requiredForSubmit={true}
            text="Length"
          />,
          "name": "test-course.weeks_to_complete",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": <div>
            <p>
              The primary instructor or instructors for the course.
            </p>
            <p>
              The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
            </p>
          </div>,
          "id": "test-course.staff.label",
          "required": false,
          "requiredForSubmit": true,
          "text": "Staff",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "courseRunKey": "edX101+DemoX",
          "courseUuid": "11111111-1111-1111-1111-111111111111",
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "name": "test-course.staff",
          "owners": Array [],
          "sourceInfo": Object {},
          "stafferInfo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "disabled": false,
            "labels": Object {
              "default": "Submit Run for Review",
              "pending": "Submitting Run for Review",
            },
            "onClick": [Function],
            "primary": true,
            "state": "default",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.start.label"
                required={true}
                requiredForSubmit={true}
                text="Start date"
              />
            }
            name="test-course.start"
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.end.label"
                required={true}
                requiredForSubmit={true}
                text="End date"
              />
            }
            name="test-course.end"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The scheduled date for when the course run will be live and published.
                    </p>
                    <p>
                      If you would like the run to be published as soon as possible, do not set a publish date.
                    </p>
                  </div>
                }
                id="test-course.go_live_date.label"
                required={false}
                requiredForSubmit={true}
                text="Publish date"
              />
            }
            name="test-course.go_live_date"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={null}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The minimum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.min_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Minimum effort"
              />
            }
            name="test-course.min_effort"
            required={null}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The maximum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.max_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Maximum effort"
              />
            }
            name="test-course.max_effort"
            required={null}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="test-course.pacing_type.label"
                required={false}
                requiredForSubmit={false}
                text="Course pacing"
              />
            }
            name="test-course.pacing_type"
            options={
              Array [
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            required={null}
            type="text"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                required={false}
                requiredForSubmit={true}
                text="Content language"
              />
            }
            name="test-course.content_language"
            options={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            required={null}
            type="text"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Transcript languages"
          />,
          <FieldArray
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            languageOptions={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            name="test-course.transcript_languages"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The length of the course, in weeks, rounded to the nearest whole number.
                    </p>
                  </div>
                }
                id="test-course.weeks_to_complete.label"
                required={false}
                requiredForSubmit={true}
                text="Length"
              />
            }
            name="test-course.weeks_to_complete"
            required={null}
            type="number"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText={
              <div>
                <p>
                  The primary instructor or instructors for the course.
                </p>
                <p>
                  The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
                </p>
              </div>
            }
            id="test-course.staff.label"
            required={false}
            requiredForSubmit={true}
            text="Staff"
          />,
          <Field
            component={[Function]}
            courseRunKey="edX101+DemoX"
            courseUuid="11111111-1111-1111-1111-111111111111"
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            name="test-course.staff"
            owners={Array []}
            sourceInfo={Object {}}
            stafferInfo={Object {}}
          />,
          <ButtonToolbar
            className=""
          >
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />
          </ButtonToolbar>,
        ],
        "expandedTitle": undefined,
        "iconId": "collapsible-icon-test-course",
        "isCollapsible": undefined,
        "isOpen": false,
        "onToggle": [Function],
        "title": <div
          className="course-run-label"
        >
          <span>
            Course run starting on Jan 1st 2000 - Self Paced
          </span>
          <Pill
            statuses={
              Array [
                "unpublished",
              ]
            }
          />
          <div
            className="course-run-studio-url"
          >
            Studio URL - 
            <a
              href="undefined/course/edX101+DemoX"
            >
              edX101+DemoX
            </a>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />,
            "name": "test-course.start",
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />,
            "name": "test-course.end",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />,
            "name": "test-course.go_live_date",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": null,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />,
            "name": "test-course.min_effort",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />,
            "name": "test-course.max_effort",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />,
            "name": "test-course.pacing_type",
            "options": Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ],
            "required": null,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />,
            "name": "test-course.content_language",
            "options": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "required": null,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": true,
            "text": "Transcript languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "languageOptions": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "name": "test-course.transcript_languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />,
            "name": "test-course.weeks_to_complete",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>,
            "id": "test-course.staff.label",
            "required": false,
            "requiredForSubmit": true,
            "text": "Staff",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "courseRunKey": "edX101+DemoX",
            "courseUuid": "11111111-1111-1111-1111-111111111111",
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "name": "test-course.staff",
            "owners": Array [],
            "sourceInfo": Object {},
            "stafferInfo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "disabled": false,
              "labels": Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              },
              "onClick": [Function],
              "primary": true,
              "state": "default",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Collapsible Course Run renders correctly when submitting for review and given a matching target run 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapsibleCourseRun
    courseId="test-course"
    courseInReview={false}
    courseRun={
      Object {
        "content_language": "ar-ae",
        "end": "2010/01/01",
        "go_live_date": "1999/12/31",
        "key": "edX101+DemoX",
        "max_effort": 1,
        "min_effort": 1,
        "pacing_type": "self_paced",
        "start": "2000-01-01T12:00:00Z",
        "status": "published",
        "transcript_languages": Array [
          "ar-ae",
        ],
        "weeks_to_complete": 1,
      }
    }
    courseSubmitting={false}
    courseUuid="11111111-1111-1111-1111-111111111111"
    isSubmittingForReview={true}
    languageOptions={
      Array [
        Object {
          "label": "Arabic - United Arab Emirates",
          "value": "ar-ae",
        },
      ]
    }
    owners={Array []}
    pacingTypeOptions={
      Array [
        Object {
          "label": "Self-paced",
          "value": "self_paced",
        },
      ]
    }
    sourceInfo={Object {}}
    stafferInfo={Object {}}
    targetRun={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />
          }
          name="test-course.start"
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />
          }
          name="test-course.end"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />
          }
          name="test-course.go_live_date"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={null}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />
          }
          name="test-course.min_effort"
          required={null}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />
          }
          name="test-course.max_effort"
          required={null}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />
          }
          name="test-course.pacing_type"
          options={
            Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ]
          }
          required={null}
          type="text"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />
          }
          name="test-course.content_language"
          options={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          required={null}
          type="text"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={true}
          text="Transcript languages"
        />,
        <FieldArray
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          languageOptions={
            Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ]
          }
          name="test-course.transcript_languages"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />
          }
          name="test-course.weeks_to_complete"
          required={null}
          type="number"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText={
            <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>
          }
          id="test-course.staff.label"
          required={false}
          requiredForSubmit={true}
          text="Staff"
        />,
        <Field
          component={[Function]}
          courseRunKey="edX101+DemoX"
          courseUuid="11111111-1111-1111-1111-111111111111"
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          name="test-course.staff"
          owners={Array []}
          sourceInfo={Object {}}
          stafferInfo={Object {}}
        />,
        <ButtonToolbar
          className=""
        >
          <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />
        </ButtonToolbar>,
      ],
      "expandedTitle": undefined,
      "iconId": "collapsible-icon-test-course",
      "isCollapsible": undefined,
      "isOpen": false,
      "onToggle": [Function],
      "title": <div
        className="course-run-label"
      >
        <span>
          Course run starting on Jan 1st 2000 - Self Paced
        </span>
        <Pill
          statuses={
            Array [
              "published",
            ]
          }
        />
        <div
          className="course-run-studio-url"
        >
          Studio URL - 
          <a
            href="undefined/course/edX101+DemoX"
          >
            edX101+DemoX
          </a>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Start on a Tuesday, Wednesday, or Thursday.
                </p>
                <p>
                  Avoid major U.S. holidays.
                </p>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.start.label"
            required={true}
            requiredForSubmit={true}
            text="Start date"
          />,
          "name": "test-course.start",
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.end.label"
            required={true}
            requiredForSubmit={true}
            text="End date"
          />,
          "name": "test-course.end",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The scheduled date for when the course run will be live and published.
                </p>
                <p>
                  If you would like the run to be published as soon as possible, do not set a publish date.
                </p>
              </div>
            }
            id="test-course.go_live_date.label"
            required={false}
            requiredForSubmit={true}
            text="Publish date"
          />,
          "name": "test-course.go_live_date",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": null,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The minimum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.min_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Minimum effort"
          />,
          "name": "test-course.min_effort",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The maximum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.max_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Maximum effort"
          />,
          "name": "test-course.max_effort",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                </p>
                <p>
                  Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                </p>
              </div>
            }
            id="test-course.pacing_type.label"
            required={false}
            requiredForSubmit={false}
            text="Course pacing"
          />,
          "name": "test-course.pacing_type",
          "options": Array [
            Object {
              "label": "Self-paced",
              "value": "self_paced",
            },
          ],
          "required": null,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Content language"
          />,
          "name": "test-course.content_language",
          "options": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "required": null,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": true,
          "text": "Transcript languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "languageOptions": Array [
            Object {
              "label": "Arabic - United Arab Emirates",
              "value": "ar-ae",
            },
          ],
          "name": "test-course.transcript_languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The length of the course, in weeks, rounded to the nearest whole number.
                </p>
              </div>
            }
            id="test-course.weeks_to_complete.label"
            required={false}
            requiredForSubmit={true}
            text="Length"
          />,
          "name": "test-course.weeks_to_complete",
          "required": null,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": <div>
            <p>
              The primary instructor or instructors for the course.
            </p>
            <p>
              The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
            </p>
          </div>,
          "id": "test-course.staff.label",
          "required": false,
          "requiredForSubmit": true,
          "text": "Staff",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "courseRunKey": "edX101+DemoX",
          "courseUuid": "11111111-1111-1111-1111-111111111111",
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "name": "test-course.staff",
          "owners": Array [],
          "sourceInfo": Object {},
          "stafferInfo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "disabled": false,
            "labels": Object {
              "default": "Publish Run",
              "pending": "Publishing Run",
            },
            "onClick": [Function],
            "primary": true,
            "state": "default",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.start.label"
                required={true}
                requiredForSubmit={true}
                text="Start date"
              />
            }
            name="test-course.start"
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.end.label"
                required={true}
                requiredForSubmit={true}
                text="End date"
              />
            }
            name="test-course.end"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The scheduled date for when the course run will be live and published.
                    </p>
                    <p>
                      If you would like the run to be published as soon as possible, do not set a publish date.
                    </p>
                  </div>
                }
                id="test-course.go_live_date.label"
                required={false}
                requiredForSubmit={true}
                text="Publish date"
              />
            }
            name="test-course.go_live_date"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={null}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The minimum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.min_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Minimum effort"
              />
            }
            name="test-course.min_effort"
            required={null}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The maximum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.max_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Maximum effort"
              />
            }
            name="test-course.max_effort"
            required={null}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="test-course.pacing_type.label"
                required={false}
                requiredForSubmit={false}
                text="Course pacing"
              />
            }
            name="test-course.pacing_type"
            options={
              Array [
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            required={null}
            type="text"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                required={false}
                requiredForSubmit={true}
                text="Content language"
              />
            }
            name="test-course.content_language"
            options={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            required={null}
            type="text"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Transcript languages"
          />,
          <FieldArray
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            languageOptions={
              Array [
                Object {
                  "label": "Arabic - United Arab Emirates",
                  "value": "ar-ae",
                },
              ]
            }
            name="test-course.transcript_languages"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The length of the course, in weeks, rounded to the nearest whole number.
                    </p>
                  </div>
                }
                id="test-course.weeks_to_complete.label"
                required={false}
                requiredForSubmit={true}
                text="Length"
              />
            }
            name="test-course.weeks_to_complete"
            required={null}
            type="number"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText={
              <div>
                <p>
                  The primary instructor or instructors for the course.
                </p>
                <p>
                  The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
                </p>
              </div>
            }
            id="test-course.staff.label"
            required={false}
            requiredForSubmit={true}
            text="Staff"
          />,
          <Field
            component={[Function]}
            courseRunKey="edX101+DemoX"
            courseUuid="11111111-1111-1111-1111-111111111111"
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            name="test-course.staff"
            owners={Array []}
            sourceInfo={Object {}}
            stafferInfo={Object {}}
          />,
          <ButtonToolbar
            className=""
          >
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Publish Run",
                  "pending": "Publishing Run",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />
          </ButtonToolbar>,
        ],
        "expandedTitle": undefined,
        "iconId": "collapsible-icon-test-course",
        "isCollapsible": undefined,
        "isOpen": false,
        "onToggle": [Function],
        "title": <div
          className="course-run-label"
        >
          <span>
            Course run starting on Jan 1st 2000 - Self Paced
          </span>
          <Pill
            statuses={
              Array [
                "published",
              ]
            }
          />
          <div
            className="course-run-studio-url"
          >
            Studio URL - 
            <a
              href="undefined/course/edX101+DemoX"
            >
              edX101+DemoX
            </a>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />,
            "name": "test-course.start",
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />,
            "name": "test-course.end",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />,
            "name": "test-course.go_live_date",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": null,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />,
            "name": "test-course.min_effort",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />,
            "name": "test-course.max_effort",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />,
            "name": "test-course.pacing_type",
            "options": Array [
              Object {
                "label": "Self-paced",
                "value": "self_paced",
              },
            ],
            "required": null,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />,
            "name": "test-course.content_language",
            "options": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "required": null,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": true,
            "text": "Transcript languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "languageOptions": Array [
              Object {
                "label": "Arabic - United Arab Emirates",
                "value": "ar-ae",
              },
            ],
            "name": "test-course.transcript_languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />,
            "name": "test-course.weeks_to_complete",
            "required": null,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>,
            "id": "test-course.staff.label",
            "required": false,
            "requiredForSubmit": true,
            "text": "Staff",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "courseRunKey": "edX101+DemoX",
            "courseUuid": "11111111-1111-1111-1111-111111111111",
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "name": "test-course.staff",
            "owners": Array [],
            "sourceInfo": Object {},
            "stafferInfo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Publish Run",
                  "pending": "Publishing Run",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "disabled": false,
              "labels": Object {
                "default": "Publish Run",
                "pending": "Publishing Run",
              },
              "onClick": [Function],
              "primary": true,
              "state": "default",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Collapsible Course Run renders correctly with no fields 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapsibleCourseRun
    courseId="test-course"
    courseInReview={false}
    courseRun={Object {}}
    courseSubmitting={false}
    courseUuid="11111111-1111-1111-1111-111111111111"
    isSubmittingForReview={false}
    languageOptions={Array []}
    owners={Array []}
    pacingTypeOptions={Array []}
    sourceInfo={Object {}}
    stafferInfo={Object {}}
    targetRun={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />
          }
          name="test-course.start"
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />
          }
          name="test-course.end"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={true}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          format={[Function]}
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />
          }
          name="test-course.go_live_date"
          normalize={[Function]}
          placeholder="mm/dd/yyyy"
          required={false}
          type="date"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />
          }
          name="test-course.min_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />
          }
          name="test-course.max_effort"
          required={false}
          type="number"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />
          }
          name="test-course.pacing_type"
          options={Array []}
          required={false}
          type="text"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />
          }
          name="test-course.content_language"
          options={Array []}
          required={false}
          type="text"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={true}
          text="Transcript languages"
        />,
        <FieldArray
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          languageOptions={Array []}
          name="test-course.transcript_languages"
        />,
        <Field
          component={[Function]}
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          label={
            <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />
          }
          name="test-course.weeks_to_complete"
          required={false}
          type="number"
        />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText={
            <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>
          }
          id="test-course.staff.label"
          required={false}
          requiredForSubmit={true}
          text="Staff"
        />,
        <Field
          component={[Function]}
          courseUuid="11111111-1111-1111-1111-111111111111"
          disabled={false}
          extraInput={
            Object {
              "onInvalid": [Function],
            }
          }
          name="test-course.staff"
          owners={Array []}
          sourceInfo={Object {}}
          stafferInfo={Object {}}
        />,
        <ButtonToolbar
          className=""
        >
          <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />
        </ButtonToolbar>,
      ],
      "expandedTitle": undefined,
      "iconId": "collapsible-icon-test-course",
      "isCollapsible": undefined,
      "isOpen": false,
      "onToggle": [Function],
      "title": <div
        className="course-run-label"
      >
        <span>
          Course run starting on 
        </span>
        <Pill
          statuses={
            Array [
              undefined,
            ]
          }
        />
        <div
          className="course-run-studio-url"
        >
          Studio URL - 
          <a
            href="undefined/course/undefined"
          >
            undefined
          </a>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Start on a Tuesday, Wednesday, or Thursday.
                </p>
                <p>
                  Avoid major U.S. holidays.
                </p>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.start.label"
            required={true}
            requiredForSubmit={true}
            text="Start date"
          />,
          "name": "test-course.start",
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                </p>
              </div>
            }
            id="test-course.end.label"
            required={true}
            requiredForSubmit={true}
            text="End date"
          />,
          "name": "test-course.end",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": true,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "format": [Function],
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The scheduled date for when the course run will be live and published.
                </p>
                <p>
                  If you would like the run to be published as soon as possible, do not set a publish date.
                </p>
              </div>
            }
            id="test-course.go_live_date.label"
            required={false}
            requiredForSubmit={true}
            text="Publish date"
          />,
          "name": "test-course.go_live_date",
          "normalize": [Function],
          "placeholder": "mm/dd/yyyy",
          "required": false,
          "type": "date",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The minimum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.min_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Minimum effort"
          />,
          "name": "test-course.min_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The maximum number of hours per week the learner should expect to spend on the course.
                </p>
              </div>
            }
            id="test-course.max_effort.label"
            required={false}
            requiredForSubmit={true}
            text="Maximum effort"
          />,
          "name": "test-course.max_effort",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                </p>
                <p>
                  Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                </p>
              </div>
            }
            id="test-course.pacing_type.label"
            required={false}
            requiredForSubmit={false}
            text="Course pacing"
          />,
          "name": "test-course.pacing_type",
          "options": Array [],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Content language"
          />,
          "name": "test-course.content_language",
          "options": Array [],
          "required": false,
          "type": "text",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": true,
          "text": "Transcript languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "languageOptions": Array [],
          "name": "test-course.transcript_languages",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "label": <FieldLabel
            className=""
            extraText=""
            helpText={
              <div>
                <p>
                  The length of the course, in weeks, rounded to the nearest whole number.
                </p>
              </div>
            }
            id="test-course.weeks_to_complete.label"
            required={false}
            requiredForSubmit={true}
            text="Length"
          />,
          "name": "test-course.weeks_to_complete",
          "required": false,
          "type": "number",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": <div>
            <p>
              The primary instructor or instructors for the course.
            </p>
            <p>
              The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
            </p>
          </div>,
          "id": "test-course.staff.label",
          "required": false,
          "requiredForSubmit": true,
          "text": "Staff",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "component": [Function],
          "courseRunKey": undefined,
          "courseUuid": "11111111-1111-1111-1111-111111111111",
          "disabled": false,
          "extraInput": Object {
            "onInvalid": [Function],
          },
          "name": "test-course.staff",
          "owners": Array [],
          "sourceInfo": Object {},
          "stafferInfo": Object {},
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ActionButton
            className=""
            disabled={false}
            labels={
              Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              }
            }
            onClick={[Function]}
            primary={true}
            state="default"
          />,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "disabled": false,
            "labels": Object {
              "default": "Submit Run for Review",
              "pending": "Submitting Run for Review",
            },
            "onClick": [Function],
            "primary": true,
            "state": "default",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.start.label"
                required={true}
                requiredForSubmit={true}
                text="Start date"
              />
            }
            name="test-course.start"
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="test-course.end.label"
                required={true}
                requiredForSubmit={true}
                text="End date"
              />
            }
            name="test-course.end"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={true}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            format={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The scheduled date for when the course run will be live and published.
                    </p>
                    <p>
                      If you would like the run to be published as soon as possible, do not set a publish date.
                    </p>
                  </div>
                }
                id="test-course.go_live_date.label"
                required={false}
                requiredForSubmit={true}
                text="Publish date"
              />
            }
            name="test-course.go_live_date"
            normalize={[Function]}
            placeholder="mm/dd/yyyy"
            required={false}
            type="date"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The minimum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.min_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Minimum effort"
              />
            }
            name="test-course.min_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The maximum number of hours per week the learner should expect to spend on the course.
                    </p>
                  </div>
                }
                id="test-course.max_effort.label"
                required={false}
                requiredForSubmit={true}
                text="Maximum effort"
              />
            }
            name="test-course.max_effort"
            required={false}
            type="number"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="test-course.pacing_type.label"
                required={false}
                requiredForSubmit={false}
                text="Course pacing"
              />
            }
            name="test-course.pacing_type"
            options={Array []}
            required={false}
            type="text"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText=""
                id={null}
                required={false}
                requiredForSubmit={true}
                text="Content language"
              />
            }
            name="test-course.content_language"
            options={Array []}
            required={false}
            type="text"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={true}
            text="Transcript languages"
          />,
          <FieldArray
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            languageOptions={Array []}
            name="test-course.transcript_languages"
          />,
          <Field
            component={[Function]}
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The length of the course, in weeks, rounded to the nearest whole number.
                    </p>
                  </div>
                }
                id="test-course.weeks_to_complete.label"
                required={false}
                requiredForSubmit={true}
                text="Length"
              />
            }
            name="test-course.weeks_to_complete"
            required={false}
            type="number"
          />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText={
              <div>
                <p>
                  The primary instructor or instructors for the course.
                </p>
                <p>
                  The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
                </p>
              </div>
            }
            id="test-course.staff.label"
            required={false}
            requiredForSubmit={true}
            text="Staff"
          />,
          <Field
            component={[Function]}
            courseUuid="11111111-1111-1111-1111-111111111111"
            disabled={false}
            extraInput={
              Object {
                "onInvalid": [Function],
              }
            }
            name="test-course.staff"
            owners={Array []}
            sourceInfo={Object {}}
            stafferInfo={Object {}}
          />,
          <ButtonToolbar
            className=""
          >
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />
          </ButtonToolbar>,
        ],
        "expandedTitle": undefined,
        "iconId": "collapsible-icon-test-course",
        "isCollapsible": undefined,
        "isOpen": false,
        "onToggle": [Function],
        "title": <div
          className="course-run-label"
        >
          <span>
            Course run starting on 
          </span>
          <Pill
            statuses={
              Array [
                undefined,
              ]
            }
          />
          <div
            className="course-run-studio-url"
          >
            Studio URL - 
            <a
              href="undefined/course/undefined"
            >
              undefined
            </a>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major U.S. holidays.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.start.label"
              required={true}
              requiredForSubmit={true}
              text="Start date"
            />,
            "name": "test-course.start",
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              id="test-course.end.label"
              required={true}
              requiredForSubmit={true}
              text="End date"
            />,
            "name": "test-course.end",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": true,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "format": [Function],
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The scheduled date for when the course run will be live and published.
                  </p>
                  <p>
                    If you would like the run to be published as soon as possible, do not set a publish date.
                  </p>
                </div>
              }
              id="test-course.go_live_date.label"
              required={false}
              requiredForSubmit={true}
              text="Publish date"
            />,
            "name": "test-course.go_live_date",
            "normalize": [Function],
            "placeholder": "mm/dd/yyyy",
            "required": false,
            "type": "date",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The minimum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.min_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Minimum effort"
            />,
            "name": "test-course.min_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The maximum number of hours per week the learner should expect to spend on the course.
                  </p>
                </div>
              }
              id="test-course.max_effort.label"
              required={false}
              requiredForSubmit={true}
              text="Maximum effort"
            />,
            "name": "test-course.max_effort",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                  </p>
                  <p>
                    Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                  </p>
                </div>
              }
              id="test-course.pacing_type.label"
              required={false}
              requiredForSubmit={false}
              text="Course pacing"
            />,
            "name": "test-course.pacing_type",
            "options": Array [],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText=""
              id={null}
              required={false}
              requiredForSubmit={true}
              text="Content language"
            />,
            "name": "test-course.content_language",
            "options": Array [],
            "required": false,
            "type": "text",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": true,
            "text": "Transcript languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "languageOptions": Array [],
            "name": "test-course.transcript_languages",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "label": <FieldLabel
              className=""
              extraText=""
              helpText={
                <div>
                  <p>
                    The length of the course, in weeks, rounded to the nearest whole number.
                  </p>
                </div>
              }
              id="test-course.weeks_to_complete.label"
              required={false}
              requiredForSubmit={true}
              text="Length"
            />,
            "name": "test-course.weeks_to_complete",
            "required": false,
            "type": "number",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": <div>
              <p>
                The primary instructor or instructors for the course.
              </p>
              <p>
                The order that instructors are listed here is the same order they will be displayed on course pages. You can drag and drop to reorder instructors.
              </p>
            </div>,
            "id": "test-course.staff.label",
            "required": false,
            "requiredForSubmit": true,
            "text": "Staff",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "courseRunKey": undefined,
            "courseUuid": "11111111-1111-1111-1111-111111111111",
            "disabled": false,
            "extraInput": Object {
              "onInvalid": [Function],
            },
            "name": "test-course.staff",
            "owners": Array [],
            "sourceInfo": Object {},
            "stafferInfo": Object {},
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Submit Run for Review",
                  "pending": "Submitting Run for Review",
                }
              }
              onClick={[Function]}
              primary={true}
              state="default"
            />,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "disabled": false,
              "labels": Object {
                "default": "Submit Run for Review",
                "pending": "Submitting Run for Review",
              },
              "onClick": [Function],
              "primary": true,
              "state": "default",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
