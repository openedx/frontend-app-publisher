// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListField - Collaborators renders a list of item members and an autocomplete input 1`] = `
<div
  name="collaborators"
  tabIndex="-1"
>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="CollaboratorList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="Collaborator-search"
    id="label-Collaborator-search"
  >
    <strong>
      Search or add new Collaborator:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="Collaborator-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;

exports[`ListField - Collaborators renders correctly with an error after failed submission 1`] = `
<div
  name="collaborators"
  tabIndex="-1"
>
  <ForwardRef
    dismissible={false}
    onClose={[Function]}
    show={true}
    stacked={false}
    transition={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "appear": false,
          "in": false,
          "mountOnEnter": false,
          "timeout": 300,
          "unmountOnExit": false,
        },
        "displayName": "Fade",
        "render": [Function],
      }
    }
    variant="danger"
  >
    This field is required
  </ForwardRef>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="CollaboratorList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="Collaborator-search"
    id="label-Collaborator-search"
  >
    <strong>
      Search or add new Collaborator:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="Collaborator-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;

exports[`ListField - Collaborators renders correctly with referred props 1`] = `
<div
  name="collaborators"
  tabIndex="-1"
>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="CollaboratorList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="Collaborator-search"
    id="label-Collaborator-search"
  >
    <strong>
      Search or add new Collaborator:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="Collaborator-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;

exports[`ListField - Staffers renders a list of staff members and an autocomplete input 1`] = `
<div
  tabIndex="-1"
>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="staffList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="staff-search"
    id="label-staff-search"
  >
    <strong>
      Search or add new staff:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="staff-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;

exports[`ListField - Staffers renders correctly with an error after failed submission 1`] = `
<div
  tabIndex="-1"
>
  <ForwardRef
    dismissible={false}
    onClose={[Function]}
    show={true}
    stacked={false}
    transition={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "defaultProps": Object {
          "appear": false,
          "in": false,
          "mountOnEnter": false,
          "timeout": 300,
          "unmountOnExit": false,
        },
        "displayName": "Fade",
        "render": [Function],
      }
    }
    variant="danger"
  >
    This field is required
  </ForwardRef>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="staffList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="staff-search"
    id="label-staff-search"
  >
    <strong>
      Search or add new staff:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="staff-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;

exports[`ListField - Staffers renders correctly with referred props 1`] = `
<div
  tabIndex="-1"
>
  <DragDropContext
    onDragEnd={[Function]}
  >
    <Connect(Droppable)
      direction="vertical"
      droppableId="staffList"
      getContainerForClone={[Function]}
      ignoreContainerClipping={false}
      isCombineEnabled={false}
      isDropDisabled={false}
      mode="standard"
      renderClone={null}
      type="DEFAULT"
    >
      <Component />
    </Connect(Droppable)>
  </DragDropContext>
  <label
    className="w-100"
    htmlFor="staff-search"
    id="label-staff-search"
  >
    <strong>
      Search or add new staff:
    </strong>
    <Autosuggest
      alwaysRenderSuggestions={false}
      containerProps={Object {}}
      focusInputOnSuggestionClick={true}
      getSuggestionValue={[Function]}
      highlightFirstSuggestion={false}
      id="staff-search"
      inputProps={
        Object {
          "className": "form-control",
          "disabled": false,
          "onChange": [Function],
          "placeholder": "",
          "type": "text",
          "value": "",
        }
      }
      multiSection={false}
      onSuggestionSelected={[Function]}
      onSuggestionsClearRequested={[Function]}
      onSuggestionsFetchRequested={[Function]}
      renderSuggestion={[Function]}
      renderSuggestionsContainer={[Function]}
      shouldKeepSuggestionsOnSelect={[Function]}
      shouldRenderSuggestions={[Function]}
      suggestions={Array []}
      theme={
        Object {
          "container": "react-autosuggest__container position-relative",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted bg-gray-300",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open bg-white border-gray-300 w-100",
          "suggestionsList": "react-autosuggest__suggestions-list m-0 p-0 list-unstyled overflow-auto",
        }
      }
    />
  </label>
</div>
`;
