// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RenderInputTextField renders html for number type 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <asInput(m)
    className={Array []}
    dangerIconDescription=""
    disabled={false}
    id="testId"
    inline={false}
    isValid={true}
    label="TestLabel"
    onBlur={[Function]}
    onChange={[Function]}
    onKeyPress={[Function]}
    required={false}
    themes={
      Array [
        "danger",
      ]
    }
    type="number"
    validationMessage=""
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className=""
          htmlFor="testId"
          id="label-testId"
        >
          TestLabel
        </label>,
        <m
          autoComplete="on"
          className={
            Array [
              "form-control",
            ]
          }
          dangerIconDescription=""
          describedBy="error-testId"
          descriptionId="description-testId"
          disabled={false}
          errorId="error-testId"
          id="testId"
          inline={false}
          inputRef={[Function]}
          isValid={true}
          label="TestLabel"
          onBlur={[Function]}
          onChange={[Function]}
          onKeyPress={[Function]}
          readOnly={false}
          required={false}
          themes={
            Array [
              "danger",
            ]
          }
          type="number"
          validationMessage=""
          value=""
        />,
        false,
        <t
          className=""
          id="error-testId"
          invalidMessage=""
          isValid={true}
          variant={
            Object {
              "status": "DANGER",
            }
          }
          variantIconDescription=""
        />,
        undefined,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "TestLabel",
          "className": "",
          "htmlFor": "testId",
          "id": "label-testId",
        },
        "ref": null,
        "rendered": "TestLabel",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "autoComplete": "on",
          "className": Array [
            "form-control",
          ],
          "dangerIconDescription": "",
          "describedBy": "error-testId",
          "description": undefined,
          "descriptionId": "description-testId",
          "disabled": false,
          "errorId": "error-testId",
          "id": "testId",
          "inline": false,
          "inputGroupAppend": undefined,
          "inputGroupPrepend": undefined,
          "inputRef": [Function],
          "isValid": true,
          "label": "TestLabel",
          "onBlur": [Function],
          "onChange": [Function],
          "onKeyPress": [Function],
          "readOnly": false,
          "required": false,
          "themes": Array [
            "danger",
          ],
          "type": "number",
          "validationMessage": "",
          "validator": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "",
          "id": "error-testId",
          "invalidMessage": "",
          "isValid": true,
          "variant": Object {
            "status": "DANGER",
          },
          "variantIconDescription": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className=""
            htmlFor="testId"
            id="label-testId"
          >
            TestLabel
          </label>,
          <m
            autoComplete="on"
            className={
              Array [
                "form-control",
              ]
            }
            dangerIconDescription=""
            describedBy="error-testId"
            descriptionId="description-testId"
            disabled={false}
            errorId="error-testId"
            id="testId"
            inline={false}
            inputRef={[Function]}
            isValid={true}
            label="TestLabel"
            onBlur={[Function]}
            onChange={[Function]}
            onKeyPress={[Function]}
            readOnly={false}
            required={false}
            themes={
              Array [
                "danger",
              ]
            }
            type="number"
            validationMessage=""
            value=""
          />,
          false,
          <t
            className=""
            id="error-testId"
            invalidMessage=""
            isValid={true}
            variant={
              Object {
                "status": "DANGER",
              }
            }
            variantIconDescription=""
          />,
          undefined,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "TestLabel",
            "className": "",
            "htmlFor": "testId",
            "id": "label-testId",
          },
          "ref": null,
          "rendered": "TestLabel",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "autoComplete": "on",
            "className": Array [
              "form-control",
            ],
            "dangerIconDescription": "",
            "describedBy": "error-testId",
            "description": undefined,
            "descriptionId": "description-testId",
            "disabled": false,
            "errorId": "error-testId",
            "id": "testId",
            "inline": false,
            "inputGroupAppend": undefined,
            "inputGroupPrepend": undefined,
            "inputRef": [Function],
            "isValid": true,
            "label": "TestLabel",
            "onBlur": [Function],
            "onChange": [Function],
            "onKeyPress": [Function],
            "readOnly": false,
            "required": false,
            "themes": Array [
              "danger",
            ],
            "type": "number",
            "validationMessage": "",
            "validator": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "",
            "id": "error-testId",
            "invalidMessage": "",
            "isValid": true,
            "variant": Object {
              "status": "DANGER",
            },
            "variantIconDescription": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`RenderInputTextField renders html for text 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <asInput(m)
    className={Array []}
    dangerIconDescription=""
    disabled={false}
    id="testId"
    inline={false}
    isValid={true}
    label="TestLabel"
    onBlur={[Function]}
    onChange={[Function]}
    onKeyPress={[Function]}
    required={false}
    themes={
      Array [
        "danger",
      ]
    }
    type="text"
    validationMessage=""
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className=""
          htmlFor="testId"
          id="label-testId"
        >
          TestLabel
        </label>,
        <m
          autoComplete="on"
          className={
            Array [
              "form-control",
            ]
          }
          dangerIconDescription=""
          describedBy="error-testId"
          descriptionId="description-testId"
          disabled={false}
          errorId="error-testId"
          id="testId"
          inline={false}
          inputRef={[Function]}
          isValid={true}
          label="TestLabel"
          onBlur={[Function]}
          onChange={[Function]}
          onKeyPress={[Function]}
          readOnly={false}
          required={false}
          themes={
            Array [
              "danger",
            ]
          }
          type="text"
          validationMessage=""
          value=""
        />,
        false,
        <t
          className=""
          id="error-testId"
          invalidMessage=""
          isValid={true}
          variant={
            Object {
              "status": "DANGER",
            }
          }
          variantIconDescription=""
        />,
        undefined,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "TestLabel",
          "className": "",
          "htmlFor": "testId",
          "id": "label-testId",
        },
        "ref": null,
        "rendered": "TestLabel",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "autoComplete": "on",
          "className": Array [
            "form-control",
          ],
          "dangerIconDescription": "",
          "describedBy": "error-testId",
          "description": undefined,
          "descriptionId": "description-testId",
          "disabled": false,
          "errorId": "error-testId",
          "id": "testId",
          "inline": false,
          "inputGroupAppend": undefined,
          "inputGroupPrepend": undefined,
          "inputRef": [Function],
          "isValid": true,
          "label": "TestLabel",
          "onBlur": [Function],
          "onChange": [Function],
          "onKeyPress": [Function],
          "readOnly": false,
          "required": false,
          "themes": Array [
            "danger",
          ],
          "type": "text",
          "validationMessage": "",
          "validator": undefined,
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "",
          "id": "error-testId",
          "invalidMessage": "",
          "isValid": true,
          "variant": Object {
            "status": "DANGER",
          },
          "variantIconDescription": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className=""
            htmlFor="testId"
            id="label-testId"
          >
            TestLabel
          </label>,
          <m
            autoComplete="on"
            className={
              Array [
                "form-control",
              ]
            }
            dangerIconDescription=""
            describedBy="error-testId"
            descriptionId="description-testId"
            disabled={false}
            errorId="error-testId"
            id="testId"
            inline={false}
            inputRef={[Function]}
            isValid={true}
            label="TestLabel"
            onBlur={[Function]}
            onChange={[Function]}
            onKeyPress={[Function]}
            readOnly={false}
            required={false}
            themes={
              Array [
                "danger",
              ]
            }
            type="text"
            validationMessage=""
            value=""
          />,
          false,
          <t
            className=""
            id="error-testId"
            invalidMessage=""
            isValid={true}
            variant={
              Object {
                "status": "DANGER",
              }
            }
            variantIconDescription=""
          />,
          undefined,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "TestLabel",
            "className": "",
            "htmlFor": "testId",
            "id": "label-testId",
          },
          "ref": null,
          "rendered": "TestLabel",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "autoComplete": "on",
            "className": Array [
              "form-control",
            ],
            "dangerIconDescription": "",
            "describedBy": "error-testId",
            "description": undefined,
            "descriptionId": "description-testId",
            "disabled": false,
            "errorId": "error-testId",
            "id": "testId",
            "inline": false,
            "inputGroupAppend": undefined,
            "inputGroupPrepend": undefined,
            "inputRef": [Function],
            "isValid": true,
            "label": "TestLabel",
            "onBlur": [Function],
            "onChange": [Function],
            "onKeyPress": [Function],
            "readOnly": false,
            "required": false,
            "themes": Array [
              "danger",
            ],
            "type": "text",
            "validationMessage": "",
            "validator": undefined,
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "",
            "id": "error-testId",
            "invalidMessage": "",
            "isValid": true,
            "variant": Object {
              "status": "DANGER",
            },
            "variantIconDescription": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
