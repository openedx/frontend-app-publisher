// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StatusAlert shows a status alert 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StatusAlert
    alertType="Test"
    className={Array []}
    dismissible={false}
    iconClassNames={Array []}
    message="Test Message"
    onClose={[Function]}
    title={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "alertType": "Test",
      "className": Array [],
      "dialog": <div
        className=""
      >
        <div
          className="message"
        >
          Test Message
        </div>
      </div>,
      "dismissible": false,
      "onClose": [Function],
      "open": true,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alertType": "Test",
        "className": Array [],
        "dialog": <div
          className=""
        >
          <div
            className="message"
          >
            Test Message
          </div>
        </div>,
        "dismissible": false,
        "onClose": [Function],
        "open": true,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
