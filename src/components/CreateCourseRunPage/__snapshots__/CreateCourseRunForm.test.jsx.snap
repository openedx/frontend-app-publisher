// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCourseRunForm renders html correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseRunForm
    handleSubmit={[Function]}
    initialValues={
      Object {
        "course": "edx+test101",
      }
    }
    isCreating={false}
    pristine={true}
    title="Test Course"
    uuid="00000000-0000-0000-0000-000000000001"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create a new course run
        </h2>,
        <hr />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={false}
          text="Course"
        />,
        <div
          className="mb-3"
        >
          <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>
        </div>,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="start-label"
                required={true}
                requiredForSubmit={false}
                text="Start date"
              />
            }
            name="start"
            required={true}
            type="date"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="end-label"
                required={true}
                requiredForSubmit={false}
                text="End date"
              />
            }
            name="end"
            required={true}
            type="date"
          />
          <ButtonToolbar
            className=""
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-run-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create a new course run",
        },
        "ref": null,
        "rendered": "Create a new course run",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": false,
          "text": "Course",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>,
          "className": "mb-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Test Course",
            "replace": false,
            "to": "/courses/00000000-0000-0000-0000-000000000001",
          },
          "ref": null,
          "rendered": "Test Course",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />
              }
              name="start"
              required={true}
              type="date"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />
              }
              name="end"
              required={true}
              type="date"
            />,
            <ButtonToolbar
              className=""
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="start-label"
                required={true}
                requiredForSubmit={false}
                text="Start date"
              />,
              "name": "start",
              "required": true,
              "type": "date",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="end-label"
                required={true}
                requiredForSubmit={false}
                text="End date"
              />,
              "name": "end",
              "required": true,
              "type": "date",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/courses/00000000-0000-0000-0000-000000000001",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create a new course run
          </h2>,
          <hr />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={false}
            text="Course"
          />,
          <div
            className="mb-3"
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>
          </div>,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />
              }
              name="start"
              required={true}
              type="date"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />
              }
              name="end"
              required={true}
              type="date"
            />
            <ButtonToolbar
              className=""
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-run-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a new course run",
          },
          "ref": null,
          "rendered": "Create a new course run",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": false,
            "text": "Course",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>,
            "className": "mb-3",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Course",
              "replace": false,
              "to": "/courses/00000000-0000-0000-0000-000000000001",
            },
            "ref": null,
            "rendered": "Test Course",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major U.S. holidays.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    id="start-label"
                    required={true}
                    requiredForSubmit={false}
                    text="Start date"
                  />
                }
                name="start"
                required={true}
                type="date"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    id="end-label"
                    required={true}
                    requiredForSubmit={false}
                    text="End date"
                  />
                }
                name="end"
                required={true}
                type="date"
              />,
              <ButtonToolbar
                className=""
              >
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />,
                "name": "start",
                "required": true,
                "type": "date",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />,
                "name": "end",
                "required": true,
                "type": "date",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/courses/00000000-0000-0000-0000-000000000001"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/courses/00000000-0000-0000-0000-000000000001",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CreateCourseRunForm renders html correctly when creating 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseRunForm
    handleSubmit={[Function]}
    initialValues={
      Object {
        "course": "edx+test101",
      }
    }
    isCreating={true}
    pristine={false}
    title="Test Course"
    uuid="00000000-0000-0000-0000-000000000001"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create a new course run
        </h2>,
        <hr />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          required={false}
          requiredForSubmit={false}
          text="Course"
        />,
        <div
          className="mb-3"
        >
          <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>
        </div>,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="start-label"
                required={true}
                requiredForSubmit={false}
                text="Start date"
              />
            }
            name="start"
            required={true}
            type="date"
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="end-label"
                required={true}
                requiredForSubmit={false}
                text="End date"
              />
            }
            name="end"
            required={true}
            type="date"
          />
          <ButtonToolbar
            className=""
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              <button
                className="btn btn-outline-primary"
                disabled={true}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="pending"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-run-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create a new course run",
        },
        "ref": null,
        "rendered": "Create a new course run",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "required": false,
          "requiredForSubmit": false,
          "text": "Course",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>,
          "className": "mb-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Test Course",
            "replace": false,
            "to": "/courses/00000000-0000-0000-0000-000000000001",
          },
          "ref": null,
          "rendered": "Test Course",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />
              }
              name="start"
              required={true}
              type="date"
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />
              }
              name="end"
              required={true}
              type="date"
            />,
            <ButtonToolbar
              className=""
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major U.S. holidays.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="start-label"
                required={true}
                requiredForSubmit={false}
                text="Start date"
              />,
              "name": "start",
              "required": true,
              "type": "date",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                id="end-label"
                required={true}
                requiredForSubmit={false}
                text="End date"
              />,
              "name": "end",
              "required": true,
              "type": "date",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />,
              ],
              "className": "",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/courses/00000000-0000-0000-0000-000000000001",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": true,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": false,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "pending",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create a new course run
          </h2>,
          <hr />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            required={false}
            requiredForSubmit={false}
            text="Course"
          />,
          <div
            className="mb-3"
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>
          </div>,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />
              }
              name="start"
              required={true}
              type="date"
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />
              }
              name="end"
              required={true}
              type="date"
            />
            <ButtonToolbar
              className=""
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-run-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a new course run",
          },
          "ref": null,
          "rendered": "Create a new course run",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "required": false,
            "requiredForSubmit": false,
            "text": "Course",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>,
            "className": "mb-3",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Course",
              "replace": false,
              "to": "/courses/00000000-0000-0000-0000-000000000001",
            },
            "ref": null,
            "rendered": "Test Course",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major U.S. holidays.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    id="start-label"
                    required={true}
                    requiredForSubmit={false}
                    text="Start date"
                  />
                }
                name="start"
                required={true}
                type="date"
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    id="end-label"
                    required={true}
                    requiredForSubmit={false}
                    text="End date"
                  />
                }
                name="end"
                required={true}
                type="date"
              />,
              <ButtonToolbar
                className=""
              >
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major U.S. holidays.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="start-label"
                  required={true}
                  requiredForSubmit={false}
                  text="Start date"
                />,
                "name": "start",
                "required": true,
                "type": "date",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  id="end-label"
                  required={true}
                  requiredForSubmit={false}
                  text="End date"
                />,
                "name": "end",
                "required": true,
                "type": "date",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/courses/00000000-0000-0000-0000-000000000001"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={false}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="pending"
                  />,
                ],
                "className": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/courses/00000000-0000-0000-0000-000000000001",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": false,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "pending",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
