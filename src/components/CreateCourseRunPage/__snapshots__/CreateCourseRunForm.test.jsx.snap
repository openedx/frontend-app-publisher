// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCourseRunForm renders html correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseRunForm
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunLabels={Array []}
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseTypeUuid=""
    currentFormValues={Object {}}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "course": "edx+test101",
      }
    }
    isCreating={false}
    pristine={true}
    title="Test Course"
    uuid="00000000-0000-0000-0000-000000000001"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create a new course run
        </h2>,
        <hr />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          optional={false}
          text="Course"
        />,
        <div
          className="mb-3"
        >
          <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>
        </div>,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />
            }
            name="rerun"
            options={Array []}
            type="text"
          />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-run-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create a new course run",
        },
        "ref": null,
        "rendered": "Create a new course run",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "optional": false,
          "text": "Course",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>,
          "className": "mb-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Test Course",
            "replace": false,
            "to": "/courses/00000000-0000-0000-0000-000000000001",
          },
          "ref": null,
          "rendered": "Test Course",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            false,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />,
              "name": "rerun",
              "options": Array [],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/courses/00000000-0000-0000-0000-000000000001",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create a new course run
          </h2>,
          <hr />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            optional={false}
            text="Course"
          />,
          <div
            className="mb-3"
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>
          </div>,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-run-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a new course run",
          },
          "ref": null,
          "rendered": "Create a new course run",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "optional": false,
            "text": "Course",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>,
            "className": "mb-3",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Course",
              "replace": false,
              "to": "/courses/00000000-0000-0000-0000-000000000001",
            },
            "ref": null,
            "rendered": "Test Course",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                        </p>
                      </div>
                    }
                    id="rerun.label"
                    optional={false}
                    text="Select a run to copy"
                  />
                }
                name="rerun"
                options={Array []}
                type="text"
              />,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              false,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />,
                "name": "rerun",
                "options": Array [],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/courses/00000000-0000-0000-0000-000000000001"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/courses/00000000-0000-0000-0000-000000000001",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CreateCourseRunForm renders html correctly when creating 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseRunForm
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunLabels={Array []}
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseTypeUuid=""
    currentFormValues={Object {}}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "course": "edx+test101",
      }
    }
    isCreating={true}
    pristine={false}
    title="Test Course"
    uuid="00000000-0000-0000-0000-000000000001"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create a new course run
        </h2>,
        <hr />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          optional={false}
          text="Course"
        />,
        <div
          className="mb-3"
        >
          <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>
        </div>,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />
            }
            name="rerun"
            options={Array []}
            type="text"
          />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              <button
                className="btn btn-outline-primary"
                disabled={true}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={false}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="pending"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-run-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create a new course run",
        },
        "ref": null,
        "rendered": "Create a new course run",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "optional": false,
          "text": "Course",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>,
          "className": "mb-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Test Course",
            "replace": false,
            "to": "/courses/00000000-0000-0000-0000-000000000001",
          },
          "ref": null,
          "rendered": "Test Course",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            false,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />,
              "name": "rerun",
              "options": Array [],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/courses/00000000-0000-0000-0000-000000000001",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": true,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": false,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "pending",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create a new course run
          </h2>,
          <hr />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            optional={false}
            text="Course"
          />,
          <div
            className="mb-3"
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>
          </div>,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={true}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={false}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="pending"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-run-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a new course run",
          },
          "ref": null,
          "rendered": "Create a new course run",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "optional": false,
            "text": "Course",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>,
            "className": "mb-3",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Course",
              "replace": false,
              "to": "/courses/00000000-0000-0000-0000-000000000001",
            },
            "ref": null,
            "rendered": "Test Course",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                        </p>
                      </div>
                    }
                    id="rerun.label"
                    optional={false}
                    text="Select a run to copy"
                  />
                }
                name="rerun"
                options={Array []}
                type="text"
              />,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              false,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={true}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={false}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="pending"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />,
                "name": "rerun",
                "options": Array [],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/courses/00000000-0000-0000-0000-000000000001"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={false}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="pending"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={true}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/courses/00000000-0000-0000-0000-000000000001",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": true,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": false,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "pending",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`CreateCourseRunForm renders html correctly with Course Type 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BaseCreateCourseRunForm
    courseOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "level_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Beginner",
                    "value": "beginner",
                  },
                  Object {
                    "display_name": "Intermediate",
                    "value": "intermediate",
                  },
                  Object {
                    "display_name": "Advanced",
                    "value": "advanced",
                  },
                ],
              },
              "subjects": Object {
                "child": Object {
                  "choices": Array [
                    Object {
                      "display_name": "Business",
                      "value": "business",
                    },
                    Object {
                      "display_name": "Chemistry",
                      "value": "chemistry",
                    },
                    Object {
                      "display_name": "English",
                      "value": "english",
                    },
                    Object {
                      "display_name": "Security",
                      "value": "security",
                    },
                  ],
                },
              },
              "type": Object {
                "type_options": Array [
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "credit",
                          "verified",
                          "audit",
                        ],
                        "name": "Credit",
                        "uuid": "f17e29d6-4648-4bb5-a199-97dc40f904aa",
                      },
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Credit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "credit",
                          "is_credit_eligible": true,
                          "is_id_verified": true,
                          "name": "Credit",
                          "payee": "platform",
                          "slug": "credit",
                        },
                        "seat_type": Object {
                          "name": "Credit",
                          "slug": "credit",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "9521aa7d-801b-4a67-92c3-716ea30f5086",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "verified",
                          "audit",
                        ],
                        "name": "Verified and Audit",
                        "uuid": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                      },
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "verified",
                    ],
                    "name": "Verified and Audit",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "verified",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Verified",
                          "payee": "platform",
                          "slug": "verified",
                        },
                        "seat_type": Object {
                          "name": "Verified",
                          "slug": "verified",
                        },
                      },
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "8a8f30e1-23ce-4ed3-a361-1325c656b67b",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "professional",
                        ],
                        "name": "Professional Only",
                        "uuid": "6cebfc50-abca-4674-b4c7-249b31af6ddb",
                      },
                    ],
                    "entitlement_types": Array [
                      "professional",
                    ],
                    "name": "Professional Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "professional",
                          "is_credit_eligible": false,
                          "is_id_verified": true,
                          "name": "Professional",
                          "payee": "platform",
                          "slug": "professional",
                        },
                        "seat_type": Object {
                          "name": "Professional",
                          "slug": "professional",
                        },
                      },
                    ],
                    "uuid": "fdde7d04-7ce0-4ff7-ac90-7f518e90ac1e",
                  },
                  Object {
                    "course_run_types": Array [
                      Object {
                        "modes": Array [
                          "audit",
                        ],
                        "name": "Audit Only",
                        "uuid": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                      },
                    ],
                    "entitlement_types": Array [
                      "audit",
                    ],
                    "name": "Audit Only",
                    "tracks": Array [
                      Object {
                        "mode": Object {
                          "certificate_type": "",
                          "is_credit_eligible": false,
                          "is_id_verified": false,
                          "name": "Audit",
                          "payee": "",
                          "slug": "audit",
                        },
                        "seat_type": Object {
                          "name": "Audit",
                          "slug": "audit",
                        },
                      },
                    ],
                    "uuid": "03e09c15-4127-4031-bc02-e20fcbdf09f0",
                  },
                ],
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseRunLabels={Array []}
    courseRunOptions={
      Object {
        "data": Object {
          "actions": Object {
            "POST": Object {
              "content_language": Object {
                "choices": Array [
                  Object {
                    "display_name": "Afrikaans",
                    "value": "af",
                  },
                  Object {
                    "display_name": "Arabic - United Arab Emirates",
                    "value": "ar-ae",
                  },
                ],
                "help_text": "Language in which the course is administered",
                "label": "Content language",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "expected_program_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Professional Certificate",
                    "value": "professional-certificate",
                  },
                  Object {
                    "display_name": "MicroMasters",
                    "value": "micromasters",
                  },
                  Object {
                    "display_name": "XSeries",
                    "value": "xseries",
                  },
                  Object {
                    "display_name": "Masters",
                    "value": "masters",
                  },
                ],
                "label": "Expected Program Type",
                "read_only": false,
                "required": false,
                "type": "field",
              },
              "pacing_type": Object {
                "choices": Array [
                  Object {
                    "display_name": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "display_name": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "label": "Pacing type",
                "read_only": false,
                "required": false,
                "type": "choice",
              },
            },
          },
        },
        "error": null,
        "isFetching": false,
      }
    }
    courseTypeUuid="8a8f30e1-23ce-4ed3-a361-1325c656b67b"
    currentFormValues={Object {}}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "course": "edx+test101",
      }
    }
    isCreating={false}
    pristine={true}
    title="Test Course"
    uuid="00000000-0000-0000-0000-000000000001"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          Create a new course run
        </h2>,
        <hr />,
        <FieldLabel
          className="mb-2"
          extraText=""
          helpText=""
          id={null}
          optional={false}
          text="Course"
        />,
        <div
          className="mb-3"
        >
          <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>
        </div>,
        <form
          onSubmit={[Function]}
        >
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />
            }
            name="rerun"
            options={Array []}
            type="text"
          />
          <div>
            <Field
              component={[Function]}
              dateLabel="Start date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    Start on a Tuesday, Wednesday, or Thursday.
                  </p>
                  <p>
                    Avoid major holidays.
                  </p>
                  <p>
                    Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="start"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="Start time (UTC)"
              type="text"
            />
            <Field
              component={[Function]}
              dateLabel="End date"
              helpText={
                <div>
                  <p>
                    Required Format: yyyy/mm/dd
                  </p>
                  <p>
                    If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                  </p>
                </div>
              }
              maxLength="10"
              name="end"
              pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
              placeholder="yyyy/mm/dd"
              required={true}
              timeLabel="End time (UTC)"
              type="text"
            />
          </div>
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                  </div>
                }
                id="run_type.label"
                optional={false}
                required={true}
                text="Course run enrollment track"
              />
            }
            name="run_type"
            options={
              Array [
                Object {
                  "label": "Select enrollment track",
                  "value": "",
                },
                Object {
                  "label": "Verified and Audit",
                  "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                },
                Object {
                  "label": "Audit Only",
                  "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                },
              ]
            }
            required={true}
          />
          <Field
            component={[Function]}
            label={
              <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />
            }
            name="pacing_type"
            options={
              Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ]
            }
            type="text"
          />
          <ButtonToolbar
            className=""
            leftJustify={false}
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              <button
                className="btn btn-outline-primary"
                disabled={false}
              >
                Cancel
              </button>
            </Link>
            <ActionButton
              className=""
              disabled={true}
              labels={
                Object {
                  "default": "Create",
                  "pending": "Creating",
                }
              }
              primary={true}
              state="default"
            />
          </ButtonToolbar>
        </form>,
      ],
      "className": "create-course-run-form",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Create a new course run",
        },
        "ref": null,
        "rendered": "Create a new course run",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "mb-2",
          "extraText": "",
          "helpText": "",
          "id": null,
          "optional": false,
          "text": "Course",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/courses/00000000-0000-0000-0000-000000000001"
          >
            Test Course
          </Link>,
          "className": "mb-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Test Course",
            "replace": false,
            "to": "/courses/00000000-0000-0000-0000-000000000001",
          },
          "ref": null,
          "rendered": "Test Course",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />,
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="run_type.label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />
              }
              name="run_type"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ]
              }
              required={true}
            />,
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />,
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>,
          ],
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                    </p>
                  </div>
                }
                id="rerun.label"
                optional={false}
                text="Select a run to copy"
              />,
              "name": "rerun",
              "options": Array [],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />,
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "Start date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "start",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "Start time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "dateLabel": "End date",
                  "helpText": <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>,
                  "maxLength": "10",
                  "name": "end",
                  "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                  "placeholder": "yyyy/mm/dd",
                  "required": true,
                  "timeLabel": "End time (UTC)",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                    </p>
                    <p>
                      <a
                        href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        Learn more.
                      </a>
                    </p>
                  </div>
                }
                id="run_type.label"
                optional={false}
                required={true}
                text="Course run enrollment track"
              />,
              "name": "run_type",
              "options": Array [
                Object {
                  "label": "Select enrollment track",
                  "value": "",
                },
                Object {
                  "label": "Verified and Audit",
                  "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                },
                Object {
                  "label": "Audit Only",
                  "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                },
              ],
              "required": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "label": <FieldLabel
                className=""
                extraText=""
                helpText={
                  <div>
                    <p>
                      Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                    </p>
                    <p>
                      Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                    </p>
                  </div>
                }
                id="pacing_type.label"
                optional={false}
                text="Course pacing"
              />,
              "name": "pacing_type",
              "options": Array [
                Object {
                  "label": "Instructor-paced",
                  "value": "instructor_paced",
                },
                Object {
                  "label": "Self-paced",
                  "value": "self_paced",
                },
              ],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>,
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />,
              ],
              "className": "",
              "leftJustify": false,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>,
                  "replace": false,
                  "to": "/courses/00000000-0000-0000-0000-000000000001",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "className": "btn btn-outline-primary",
                    "disabled": false,
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "",
                  "disabled": true,
                  "labels": Object {
                    "default": "Create",
                    "pending": "Creating",
                  },
                  "primary": true,
                  "state": "default",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            Create a new course run
          </h2>,
          <hr />,
          <FieldLabel
            className="mb-2"
            extraText=""
            helpText=""
            id={null}
            optional={false}
            text="Course"
          />,
          <div
            className="mb-3"
          >
            <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>
          </div>,
          <form
            onSubmit={[Function]}
          >
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />
              }
              name="rerun"
              options={Array []}
              type="text"
            />
            <div>
              <Field
                component={[Function]}
                dateLabel="Start date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      Start on a Tuesday, Wednesday, or Thursday.
                    </p>
                    <p>
                      Avoid major holidays.
                    </p>
                    <p>
                      Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="start"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="Start time (UTC)"
                type="text"
              />
              <Field
                component={[Function]}
                dateLabel="End date"
                helpText={
                  <div>
                    <p>
                      Required Format: yyyy/mm/dd
                    </p>
                    <p>
                      If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                    </p>
                  </div>
                }
                maxLength="10"
                name="end"
                pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                placeholder="yyyy/mm/dd"
                required={true}
                timeLabel="End time (UTC)"
                type="text"
              />
            </div>
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="run_type.label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />
              }
              name="run_type"
              options={
                Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ]
              }
              required={true}
            />
            <Field
              component={[Function]}
              label={
                <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />
              }
              name="pacing_type"
              options={
                Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ]
              }
              type="text"
            />
            <ButtonToolbar
              className=""
              leftJustify={false}
            >
              <Link
                replace={false}
                to="/courses/00000000-0000-0000-0000-000000000001"
              >
                <button
                  className="btn btn-outline-primary"
                  disabled={false}
                >
                  Cancel
                </button>
              </Link>
              <ActionButton
                className=""
                disabled={true}
                labels={
                  Object {
                    "default": "Create",
                    "pending": "Creating",
                  }
                }
                primary={true}
                state="default"
              />
            </ButtonToolbar>
          </form>,
        ],
        "className": "create-course-run-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Create a new course run",
          },
          "ref": null,
          "rendered": "Create a new course run",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "mb-2",
            "extraText": "",
            "helpText": "",
            "id": null,
            "optional": false,
            "text": "Course",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/courses/00000000-0000-0000-0000-000000000001"
            >
              Test Course
            </Link>,
            "className": "mb-3",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Test Course",
              "replace": false,
              "to": "/courses/00000000-0000-0000-0000-000000000001",
            },
            "ref": null,
            "rendered": "Test Course",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                        </p>
                      </div>
                    }
                    id="rerun.label"
                    optional={false}
                    text="Select a run to copy"
                  />
                }
                name="rerun"
                options={Array []}
                type="text"
              />,
              <div>
                <Field
                  component={[Function]}
                  dateLabel="Start date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="start"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="Start time (UTC)"
                  type="text"
                />
                <Field
                  component={[Function]}
                  dateLabel="End date"
                  helpText={
                    <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>
                  }
                  maxLength="10"
                  name="end"
                  pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                  placeholder="yyyy/mm/dd"
                  required={true}
                  timeLabel="End time (UTC)"
                  type="text"
                />
              </div>,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                        </p>
                        <p>
                          <a
                            href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                            rel="noopener noreferrer"
                            target="_blank"
                          >
                            Learn more.
                          </a>
                        </p>
                      </div>
                    }
                    id="run_type.label"
                    optional={false}
                    required={true}
                    text="Course run enrollment track"
                  />
                }
                name="run_type"
                options={
                  Array [
                    Object {
                      "label": "Select enrollment track",
                      "value": "",
                    },
                    Object {
                      "label": "Verified and Audit",
                      "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                    },
                    Object {
                      "label": "Audit Only",
                      "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                    },
                  ]
                }
                required={true}
              />,
              <Field
                component={[Function]}
                label={
                  <FieldLabel
                    className=""
                    extraText=""
                    helpText={
                      <div>
                        <p>
                          Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                        </p>
                        <p>
                          Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                        </p>
                      </div>
                    }
                    id="pacing_type.label"
                    optional={false}
                    text="Course pacing"
                  />
                }
                name="pacing_type"
                options={
                  Array [
                    Object {
                      "label": "Instructor-paced",
                      "value": "instructor_paced",
                    },
                    Object {
                      "label": "Self-paced",
                      "value": "self_paced",
                    },
                  ]
                }
                type="text"
              />,
              <ButtonToolbar
                className=""
                leftJustify={false}
              >
                <Link
                  replace={false}
                  to="/courses/00000000-0000-0000-0000-000000000001"
                >
                  <button
                    className="btn btn-outline-primary"
                    disabled={false}
                  >
                    Cancel
                  </button>
                </Link>
                <ActionButton
                  className=""
                  disabled={true}
                  labels={
                    Object {
                      "default": "Create",
                      "pending": "Creating",
                    }
                  }
                  primary={true}
                  state="default"
                />
              </ButtonToolbar>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Select a run to copy as the starting point for your new studio instance. The newest run is listed first.
                      </p>
                    </div>
                  }
                  id="rerun.label"
                  optional={false}
                  text="Select a run to copy"
                />,
                "name": "rerun",
                "options": Array [],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    component={[Function]}
                    dateLabel="Start date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          Start on a Tuesday, Wednesday, or Thursday.
                        </p>
                        <p>
                          Avoid major holidays.
                        </p>
                        <p>
                          Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="start"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="Start time (UTC)"
                    type="text"
                  />,
                  <Field
                    component={[Function]}
                    dateLabel="End date"
                    helpText={
                      <div>
                        <p>
                          Required Format: yyyy/mm/dd
                        </p>
                        <p>
                          If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                        </p>
                      </div>
                    }
                    maxLength="10"
                    name="end"
                    pattern="20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])"
                    placeholder="yyyy/mm/dd"
                    required={true}
                    timeLabel="End time (UTC)"
                    type="text"
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "Start date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        Start on a Tuesday, Wednesday, or Thursday.
                      </p>
                      <p>
                        Avoid major holidays.
                      </p>
                      <p>
                        Dates are editable in Studio after the course is created, rounded to the nearest term. If your courses start on January - May 2020, the URL will end in 1T2020.
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated start date. For example, if your course will start near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "start",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "Start time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "dateLabel": "End date",
                    "helpText": <div>
                      <p>
                        Required Format: yyyy/mm/dd
                      </p>
                      <p>
                        If you are unsure of the exact date, specify a day that is close to the estimated end date. For example, if your course will end near the end of March, specify March 31.
                      </p>
                    </div>,
                    "maxLength": "10",
                    "name": "end",
                    "pattern": "20[1-9][0-9]/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])",
                    "placeholder": "yyyy/mm/dd",
                    "required": true,
                    "timeLabel": "End time (UTC)",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        The enrollment track determines whether a course offers a paid certificate and what sort of verification is required.
                      </p>
                      <p>
                        <a
                          href="https://edx.readthedocs.io/projects/edx-partner-course-staff/en/latest/glossary.html#enrollment-track-g"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more.
                        </a>
                      </p>
                    </div>
                  }
                  id="run_type.label"
                  optional={false}
                  required={true}
                  text="Course run enrollment track"
                />,
                "name": "run_type",
                "options": Array [
                  Object {
                    "label": "Select enrollment track",
                    "value": "",
                  },
                  Object {
                    "label": "Verified and Audit",
                    "value": "4e260c57-24ef-46c1-9a0d-5ec3a30f6b0c",
                  },
                  Object {
                    "label": "Audit Only",
                    "value": "cfacfc62-54bd-4e1b-939a-5a94f12fbd8d",
                  },
                ],
                "required": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": <FieldLabel
                  className=""
                  extraText=""
                  helpText={
                    <div>
                      <p>
                        Instructor-paced courses include individual assignments that have specific due dates before the course end date.
                      </p>
                      <p>
                        Self-paced courses do not have individual assignments that have specific due dates before the course end date. All assignments are due on the course end date.
                      </p>
                    </div>
                  }
                  id="pacing_type.label"
                  optional={false}
                  text="Course pacing"
                />,
                "name": "pacing_type",
                "options": Array [
                  Object {
                    "label": "Instructor-paced",
                    "value": "instructor_paced",
                  },
                  Object {
                    "label": "Self-paced",
                    "value": "self_paced",
                  },
                ],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to="/courses/00000000-0000-0000-0000-000000000001"
                  >
                    <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>
                  </Link>,
                  <ActionButton
                    className=""
                    disabled={true}
                    labels={
                      Object {
                        "default": "Create",
                        "pending": "Creating",
                      }
                    }
                    primary={true}
                    state="default"
                  />,
                ],
                "className": "",
                "leftJustify": false,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <button
                      className="btn btn-outline-primary"
                      disabled={false}
                    >
                      Cancel
                    </button>,
                    "replace": false,
                    "to": "/courses/00000000-0000-0000-0000-000000000001",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "className": "btn btn-outline-primary",
                      "disabled": false,
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "",
                    "disabled": true,
                    "labels": Object {
                      "default": "Create",
                      "pending": "Creating",
                    },
                    "primary": true,
                    "state": "default",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
