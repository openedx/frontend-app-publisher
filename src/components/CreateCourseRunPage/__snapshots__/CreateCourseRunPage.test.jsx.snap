// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateCourseRunPage renders html correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCourseRunPage
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
        "isFetching": false,
      }
    }
    createCourseRun={[Function]}
    fetchCourseInfo={[Function]}
    id="00000000-0000-0000-0000-000000000001"
    initialValues={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          Create Course Run
        </HelmetWrapper>,
        <div
          className="container-fluid"
        >
          <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Create Course Run",
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": "Create Course Run",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                </div>
              </div>
            </div>
          </div>,
          "className": "container-fluid",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                </div>
              </div>
            </div>,
            "className": "row justify-content-md-center my-3 ",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                </div>
              </div>,
              "className": "col-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                  </div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />,
                      false,
                      null,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "onSubmit": [Function],
                        "title": "",
                        "uuid": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    false,
                    null,
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            Create Course Run
          </HelmetWrapper>,
          <div
            className="container-fluid"
          >
            <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Create Course Run",
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": "Create Course Run",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                  </div>
                </div>
              </div>
            </div>,
            "className": "container-fluid",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                  </div>
                </div>
              </div>,
              "className": "row justify-content-md-center my-3 ",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                  </div>
                </div>,
                "className": "col-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    false,
                    <div>
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />
                    </div>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <ReduxForm
                          onSubmit={[Function]}
                          title=""
                          uuid=""
                        />,
                        false,
                        null,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "onSubmit": [Function],
                          "title": "",
                          "uuid": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      false,
                      null,
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseRunPage renders html correctly when creating 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCourseRunPage
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": true,
        "isFetching": false,
      }
    }
    createCourseRun={[Function]}
    fetchCourseInfo={[Function]}
    id="00000000-0000-0000-0000-000000000001"
    initialValues={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          Create Course Run
        </HelmetWrapper>,
        <div
          className="container-fluid"
        >
          <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <LoadingSpinner
                    message="Creating Course Run"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Create Course Run",
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": "Create Course Run",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <LoadingSpinner
                    message="Creating Course Run"
                  />
                </div>
              </div>
            </div>
          </div>,
          "className": "container-fluid",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <LoadingSpinner
                    message="Creating Course Run"
                  />
                </div>
              </div>
            </div>,
            "className": "row justify-content-md-center my-3 ",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <LoadingSpinner
                    message="Creating Course Run"
                  />
                </div>
              </div>,
              "className": "col-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <LoadingSpinner
                      message="Creating Course Run"
                    />
                  </div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />,
                      <LoadingSpinner
                        message="Creating Course Run"
                      />,
                      null,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "onSubmit": [Function],
                        "title": "",
                        "uuid": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "message": "Creating Course Run",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    null,
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            Create Course Run
          </HelmetWrapper>,
          <div
            className="container-fluid"
          >
            <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <LoadingSpinner
                      message="Creating Course Run"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Create Course Run",
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": "Create Course Run",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <LoadingSpinner
                      message="Creating Course Run"
                    />
                  </div>
                </div>
              </div>
            </div>,
            "className": "container-fluid",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <LoadingSpinner
                      message="Creating Course Run"
                    />
                  </div>
                </div>
              </div>,
              "className": "row justify-content-md-center my-3 ",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <LoadingSpinner
                      message="Creating Course Run"
                    />
                  </div>
                </div>,
                "className": "col-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    false,
                    <div>
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />
                      <LoadingSpinner
                        message="Creating Course Run"
                      />
                    </div>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <ReduxForm
                          onSubmit={[Function]}
                          title=""
                          uuid=""
                        />,
                        <LoadingSpinner
                          message="Creating Course Run"
                        />,
                        null,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "onSubmit": [Function],
                          "title": "",
                          "uuid": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "message": "Creating Course Run",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      null,
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseRunPage renders html correctly when error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCourseRunPage
    courseInfo={
      Object {
        "data": Object {},
        "error": "failed",
        "isCreating": false,
        "isFetching": false,
      }
    }
    createCourseRun={[Function]}
    fetchCourseInfo={[Function]}
    id="00000000-0000-0000-0000-000000000001"
    initialValues={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          Create Course Run
        </HelmetWrapper>,
        <div
          className="container-fluid"
        >
          <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <StatusAlert
                    alertType="danger"
                    className={Array []}
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message="failed"
                    onClose={[Function]}
                    title="Course Run create failed: "
                  />
                </div>
              </div>
            </div>
          </div>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Create Course Run",
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": "Create Course Run",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <StatusAlert
                    alertType="danger"
                    className={Array []}
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message="failed"
                    onClose={[Function]}
                    title="Course Run create failed: "
                  />
                </div>
              </div>
            </div>
          </div>,
          "className": "container-fluid",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-6"
            >
              <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <StatusAlert
                    alertType="danger"
                    className={Array []}
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message="failed"
                    onClose={[Function]}
                    title="Course Run create failed: "
                  />
                </div>
              </div>
            </div>,
            "className": "row justify-content-md-center my-3 ",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div>
                <div>
                  <ReduxForm
                    onSubmit={[Function]}
                    title=""
                    uuid=""
                  />
                  <StatusAlert
                    alertType="danger"
                    className={Array []}
                    dismissible={false}
                    iconClassNames={Array []}
                    id="create-error"
                    message="failed"
                    onClose={[Function]}
                    title="Course Run create failed: "
                  />
                </div>
              </div>,
              "className": "col-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <StatusAlert
                      alertType="danger"
                      className={Array []}
                      dismissible={false}
                      iconClassNames={Array []}
                      id="create-error"
                      message="failed"
                      onClose={[Function]}
                      title="Course Run create failed: "
                    />
                  </div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />,
                      false,
                      <StatusAlert
                        alertType="danger"
                        className={Array []}
                        dismissible={false}
                        iconClassNames={Array []}
                        id="create-error"
                        message="failed"
                        onClose={[Function]}
                        title="Course Run create failed: "
                      />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "onSubmit": [Function],
                        "title": "",
                        "uuid": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    false,
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "alertType": "danger",
                        "className": Array [],
                        "dismissible": false,
                        "iconClassNames": Array [],
                        "id": "create-error",
                        "message": "failed",
                        "onClose": [Function],
                        "title": "Course Run create failed: ",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            Create Course Run
          </HelmetWrapper>,
          <div
            className="container-fluid"
          >
            <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <StatusAlert
                      alertType="danger"
                      className={Array []}
                      dismissible={false}
                      iconClassNames={Array []}
                      id="create-error"
                      message="failed"
                      onClose={[Function]}
                      title="Course Run create failed: "
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Create Course Run",
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": "Create Course Run",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <StatusAlert
                      alertType="danger"
                      className={Array []}
                      dismissible={false}
                      iconClassNames={Array []}
                      id="create-error"
                      message="failed"
                      onClose={[Function]}
                      title="Course Run create failed: "
                    />
                  </div>
                </div>
              </div>
            </div>,
            "className": "container-fluid",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-6"
              >
                <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <StatusAlert
                      alertType="danger"
                      className={Array []}
                      dismissible={false}
                      iconClassNames={Array []}
                      id="create-error"
                      message="failed"
                      onClose={[Function]}
                      title="Course Run create failed: "
                    />
                  </div>
                </div>
              </div>,
              "className": "row justify-content-md-center my-3 ",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div>
                  <div>
                    <ReduxForm
                      onSubmit={[Function]}
                      title=""
                      uuid=""
                    />
                    <StatusAlert
                      alertType="danger"
                      className={Array []}
                      dismissible={false}
                      iconClassNames={Array []}
                      id="create-error"
                      message="failed"
                      onClose={[Function]}
                      title="Course Run create failed: "
                    />
                  </div>
                </div>,
                "className": "col-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    false,
                    <div>
                      <ReduxForm
                        onSubmit={[Function]}
                        title=""
                        uuid=""
                      />
                      <StatusAlert
                        alertType="danger"
                        className={Array []}
                        dismissible={false}
                        iconClassNames={Array []}
                        id="create-error"
                        message="failed"
                        onClose={[Function]}
                        title="Course Run create failed: "
                      />
                    </div>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <ReduxForm
                          onSubmit={[Function]}
                          title=""
                          uuid=""
                        />,
                        false,
                        <StatusAlert
                          alertType="danger"
                          className={Array []}
                          dismissible={false}
                          iconClassNames={Array []}
                          id="create-error"
                          message="failed"
                          onClose={[Function]}
                          title="Course Run create failed: "
                        />,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "onSubmit": [Function],
                          "title": "",
                          "uuid": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      false,
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "alertType": "danger",
                          "className": Array [],
                          "dismissible": false,
                          "iconClassNames": Array [],
                          "id": "create-error",
                          "message": "failed",
                          "onClose": [Function],
                          "title": "Course Run create failed: ",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`CreateCourseRunPage renders html correctly when fetching 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateCourseRunPage
    courseInfo={
      Object {
        "data": Object {},
        "error": null,
        "isCreating": false,
        "isFetching": true,
      }
    }
    createCourseRun={[Function]}
    fetchCourseInfo={[Function]}
    id="00000000-0000-0000-0000-000000000001"
    initialValues={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          Create Course Run
        </HelmetWrapper>,
        <div
          className="container-fluid"
        >
          <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <LoadingSpinner
                  message="Loading…"
                />
              </div>
            </div>
          </div>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Create Course Run",
          "defer": true,
          "encodeSpecialCharacters": true,
        },
        "ref": null,
        "rendered": "Create Course Run",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="row justify-content-md-center my-3 "
          >
            <div
              className="col-6"
            >
              <div>
                <LoadingSpinner
                  message="Loading…"
                />
              </div>
            </div>
          </div>,
          "className": "container-fluid",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-6"
            >
              <div>
                <LoadingSpinner
                  message="Loading…"
                />
              </div>
            </div>,
            "className": "row justify-content-md-center my-3 ",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div>
                <LoadingSpinner
                  message="Loading…"
                />
              </div>,
              "className": "col-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <LoadingSpinner
                    message="Loading…"
                  />,
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "message": "Loading…",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            Create Course Run
          </HelmetWrapper>,
          <div
            className="container-fluid"
          >
            <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <LoadingSpinner
                    message="Loading…"
                  />
                </div>
              </div>
            </div>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Create Course Run",
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": "Create Course Run",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row justify-content-md-center my-3 "
            >
              <div
                className="col-6"
              >
                <div>
                  <LoadingSpinner
                    message="Loading…"
                  />
                </div>
              </div>
            </div>,
            "className": "container-fluid",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-6"
              >
                <div>
                  <LoadingSpinner
                    message="Loading…"
                  />
                </div>
              </div>,
              "className": "row justify-content-md-center my-3 ",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div>
                  <LoadingSpinner
                    message="Loading…"
                  />
                </div>,
                "className": "col-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <LoadingSpinner
                      message="Loading…"
                    />,
                    false,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "message": "Loading…",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  false,
                ],
                "type": "div",
              },
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
